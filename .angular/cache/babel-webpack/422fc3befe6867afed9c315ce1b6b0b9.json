{"ast":null,"code":"import { r as registerInstance, h, H as Host, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst SegmentedControls = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Disables all controls\n     */\n\n    this.disabled = false;\n    /**\n     * Pass props to children elements\n     */\n\n    this.passPropsToChildren = () => {\n      this.controlsInOrder.forEach(item => {\n        if (this.disabled) {\n          item['disabled'] = this.disabled;\n        }\n\n        item['designVersion'] = this.designVersion;\n      });\n    };\n  }\n  /**\n   * Provides the standard change-of-control work based on a click event.\n   * @param event carries the name and host element\n   */\n\n\n  controlClickedHandler(event) {\n    this.activeControl = event.detail.host;\n\n    for (let index = 0; index < this.controlsInOrder.length; index++) {\n      this.controlsInOrder[index].setAttribute('active', false);\n    }\n\n    this.activeControl.setAttribute('active', true);\n  }\n\n  sortControls() {\n    this.controlsInOrder = this.host.querySelectorAll('cwc-segmented-controls-item');\n    this.controlsInOrder[0].position = 'first';\n    this.controlsInOrder[this.controlsInOrder.length - 1].position = 'last';\n\n    for (let index = 1; index < this.controlsInOrder.length - 1; index++) {\n      this.controlsInOrder[index].position = 'middle';\n    }\n  }\n\n  componentWillLoad() {\n    this.sortControls();\n    initBasics(this);\n  }\n\n  componentWillRender() {\n    this.passPropsToChildren();\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n\n  render() {\n    return h(Host, null, h(\"div\", {\n      class: `cwc-segmented-controls ${this.designVersion}`\n    }, h(\"slot\", null)));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.cwc-segmented-controls{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;overflow-y:hidden;overflow-x:auto}.cwc-segmented-controls.v2{border:1px solid var(--cwc-segmented-controls-border-color,var(--cwc-color-elements-input-border,#adaebb));border-radius:20px;background-color:var(--cwc-segmented-controls-background-color,var(--cwc-color-grayscale-white,#fff))}\";\n  }\n\n};\nexport { SegmentedControls as cwc_segmented_controls };","map":null,"metadata":{},"sourceType":"module"}