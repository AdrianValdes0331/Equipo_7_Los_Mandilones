{"ast":null,"code":"import { r as registerInstance, h, H as Host, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst Hero = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.indicators = [];\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Variant is used to get a different style for the element\n     */\n\n    this.variant = 'simple';\n    /**\n     * Scheme is used to get a different background brightness\n     */\n\n    this.scheme = 'dark';\n    /**\n     * Size of component\n     */\n\n    this.size = 'medium';\n    /**\n     * Style of carousel arrow\n     */\n\n    this.arrowStyle = 'straight';\n    /**\n     * Icon color.\n     */\n\n    this.buttonsColor = 'default';\n    /**\n     * Specify whether component should render from right to left.\n     */\n\n    this.rtl = false;\n    /**\n     * If true slides will change automatically\n     */\n\n    this.autoSlide = true;\n    /**\n     * Time after slides will change\n     */\n\n    this.autoSlideTimeout = 5000;\n    /**\n     * Returns next slide in order\n     */\n\n    this.getNextSlide = () => {\n      if (this.currentSlide.getAttribute('index') === `${this.slidesNum - 1}`) {\n        return this.slides[0];\n      } else {\n        return this.currentSlide.nextElementSibling;\n      }\n    };\n    /**\n     * Returns previous slide in order\n     */\n\n\n    this.getPreviousSlide = () => {\n      if (this.currentSlide.getAttribute('index') === `${0}`) {\n        return this.previousSlide = this.slides[this.slidesNum - 1];\n      } else {\n        if (this.slides.length < 3) {\n          const clone = this.currentSlide.cloneNode(true);\n          return clone;\n        } else {\n          return this.currentSlide.previousElementSibling;\n        }\n      }\n    };\n  }\n\n  autoSlideHandler(newValue) {\n    if (newValue === false) {\n      clearInterval(this.timer);\n    } else {\n      this.setTimer();\n    }\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n    this.host.querySelector('cwc-hero-slide').classList.add('current-slide');\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n\n  componentWillRender() {\n    this.slides = this.host.querySelectorAll('cwc-hero-slide');\n    this.indicatorsNode = this.host.shadowRoot.querySelectorAll('.cwc-hero__carousel-indicator');\n    this.onSlotChange();\n    this.defineSlides();\n\n    if (this.variant === 'carousel') {\n      this.arrangeSlides();\n    }\n\n    this.passPropsToChildren();\n  }\n\n  componentDidRender() {\n    this.slides = this.host.querySelectorAll('cwc-hero-slide');\n    this.indicatorsNode = this.host.shadowRoot.querySelectorAll('.cwc-hero__carousel-indicator');\n\n    if (this.variant === 'carousel') {\n      // Handles indicator click\n      this.indicatorChange();\n\n      for (let i = 0; i < this.slidesNum; i++) {\n        this.indicatorsNode[i].addEventListener('click', () => {\n          this.host.querySelector('.current-slide').classList.remove('current-slide');\n          this.slides[i].classList.add('current-slide');\n          this.defineSlides();\n          this.arrangeSlides();\n          this.indicatorChange();\n        });\n      } // Autoslide function\n\n\n      if (this.autoSlide) {\n        this.setTimer();\n        this.host.addEventListener('mouseenter', () => {\n          clearInterval(this.timer);\n        });\n        this.host.addEventListener('mouseleave', () => {\n          this.setTimer();\n        });\n      } // Initial slide arrangement\n\n\n      this.defineSlides();\n\n      if (this.variant === 'carousel') {\n        this.arrangeSlides();\n      } // Add an event listener to check on how many slides are there and turn into 'simple' variant if there's only one\n\n\n      const slot = this.host.shadowRoot.querySelector('slot');\n      slot.addEventListener('slotchange', this.onSlotChange);\n    }\n  }\n  /**\n   * Pass props to children elements\n   */\n\n\n  passPropsToChildren() {\n    this.slides.forEach(item => {\n      item['variant'] = this.variant;\n      item['scheme'] = this.scheme;\n      item['size'] = this.size;\n    });\n  }\n  /**\n   * Changes variant to sipmle if there is only one slide and reassings index numbers if there is a change in numbers of slides\n   */\n\n\n  onSlotChange() {\n    this.slidesNum = this.slides.length;\n\n    if (this.slidesNum === 1) {\n      this.variant = 'simple';\n    }\n\n    this.assingIndex();\n  }\n  /**\n   * Defines what is the order of slides\n   */\n\n\n  defineSlides() {\n    this.currentSlide = this.host.querySelector('.current-slide');\n\n    if (this.rtl) {\n      this.nextSlide = this.getPreviousSlide();\n      this.previousSlide = this.getNextSlide();\n    } else {\n      this.nextSlide = this.getNextSlide();\n      this.previousSlide = this.getPreviousSlide();\n    }\n  }\n  /**\n   * Arranges slides in right order\n   */\n\n\n  arrangeSlides() {\n    const slideWidth = this.currentSlide.getBoundingClientRect().width;\n    this.currentSlide.style.transform = 'translateX(0px)';\n    this.nextSlide.style.transform = 'translateX(' + slideWidth.toString() + 'px)';\n    this.previousSlide.style.transform = 'translateX(-' + slideWidth.toString() + 'px)';\n  }\n  /**\n   * Assings position index numbers to all slides\n   */\n\n\n  assingIndex() {\n    const arr = Array.from(this.slides);\n    arr.forEach((item, index) => {\n      item.setAttribute('index', `${index}`);\n    });\n  }\n  /**\n   * Handles control buttons click\n   */\n\n\n  buttonClick(direction) {\n    this.host.querySelector('.current-slide').classList.remove('current-slide');\n\n    if (direction === 'previous' && this.slides.length > 2) {\n      this.previousSlide.classList.add('current-slide');\n    } else {\n      this.nextSlide.classList.add('current-slide');\n    }\n\n    this.defineSlides();\n    this.arrangeSlides();\n    this.indicatorChange();\n\n    if (this.autoSlide) {\n      this.setTimer();\n    }\n  }\n  /**\n   * Changes active indicator\n   */\n\n\n  indicatorChange() {\n    const slideIndex = Array.from(this.slides).map(element => element.classList.contains('current-slide')).indexOf(true);\n    Array.from(this.indicatorsNode).map(element => element.classList.remove('current-indicator'));\n    this.indicatorsNode[slideIndex].classList.add('current-indicator');\n  }\n  /**\n   * Changes slides after timeout\n   */\n\n\n  setTimer() {\n    clearInterval(this.timer);\n    this.timer = setInterval(() => {\n      this.rtl ? this.buttonClick('previous') : this.buttonClick('next');\n    }, this.autoSlideTimeout);\n  }\n\n  render() {\n    // Renders correct number of indicators\n    if (this.indicators.length !== this.slides.length) {\n      for (let i = 0; i < this.slidesNum; i++) {\n        this.indicators.push(h(\"button\", {\n          class: 'cwc-hero__carousel-indicator ' + (this.scheme === 'dark' ? ' cwc-hero__carousel-indicator--dark' : ' cwc-hero__carousel-indicator--bright') + (' cwc-hero__carousel-indicator--' + this.buttonsColor)\n        }));\n      }\n    }\n\n    return h(Host, {\n      class: `${this.designVersion}`\n    }, h(\"slot\", null), this.variant === 'carousel' && h(\"button\", {\n      onClick: () => this.buttonClick('previous'),\n      class: 'cwc-hero__carousel-button cwc-hero__carousel-button--prev' + (this.scheme === 'dark' ? ' cwc-hero__carousel-button--dark' : ' cwc-hero__carousel-button--bright') + (' cwc-hero__carousel-button--' + this.buttonsColor)\n    }, h(\"cwc-icon\", {\n      designVersion: this.designVersion,\n      name: this.arrowStyle === 'straight' ? 'arrow-left-straight' : 'arrow-left-rounded-fill'\n    })), this.variant === 'carousel' && h(\"button\", {\n      onClick: () => this.buttonClick('next'),\n      class: 'cwc-hero__carousel-button cwc-hero__carousel-button--next' + (this.scheme === 'dark' ? ' cwc-hero__carousel-button--dark' : ' cwc-hero__carousel-button--bright') + (' cwc-hero__carousel-button--' + this.buttonsColor)\n    }, h(\"cwc-icon\", {\n      designVersion: this.designVersion,\n      name: this.arrowStyle === 'straight' ? 'arrow-right-straight' : 'arrow-right-rounded-fill'\n    })), this.variant === 'carousel' && h(\"div\", {\n      class: \"cwc-hero__carousel-indicators\"\n    }, this.indicators));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"autoSlide\": [\"autoSlideHandler\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden}.cwc-hero__slide{display:block;width:100%;min-width:100%;height:100%;background-position:50%;background-size:cover;color:#fff;font-weight:300;background-color:var(--cwc-hero-slide-background-color,var(--cwc-color-ui-primary-darkest,#001b3a))}.cwc-hero__slide--carousel{height:auto;position:absolute;top:0;bottom:0}.cwc-hero__slide--bright{background-color:var(--cwc-hero-slide-bright-background-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)));color:var(--cwc-hero-slide-bright-color,var(--cwc-color-grayscale-black-alpha-eighty,rgba(0,0,0,.8)))}.cwc-hero__slide--bright .cwc-hero__content{background-color:var(--cwc-hero-slide-bright-content-background-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)))}.cwc-hero__slide--dark .cwc-hero__content{background-color:var(--cwc-hero-slide-dark-content-background-color,var(--cwc-color-grayscale-black-alpha-fifty,rgba(0,0,0,.5)))}.cwc-hero__slide h2{font-weight:300}.cwc-hero__content{padding:2.75rem 7.625rem}.cwc-hero__carousel-button{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);border:0;background:transparent;font-size:1.5rem;padding:0;cursor:pointer;color:var(--cwc-hero-carousel-button-color,hsla(0,0%,100%,.5));z-index:100}.cwc-hero__carousel-button--prev{left:.5rem}.cwc-hero__carousel-button--next{right:.5rem}.cwc-hero__carousel-button:hover{color:var(--cwc-hero-carousel-button-hover-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)))}.cwc-hero__carousel-button:focus{outline:none}.cwc-hero__carousel-button--bright{color:var(--cwc-hero-carousel-button-bright-color,var(--cwc-color-grayscale-black-alpha-fifty,rgba(0,0,0,.5)))}.cwc-hero__carousel-button--bright:hover{color:var(--cwc-hero-carousel-button-bright-hover-color,var(--cwc-color-grayscale-black-alpha-eighty,rgba(0,0,0,.8)))}.cwc-hero__carousel-button--true-blue{color:var(--cwc-color-ui-primary,#003876)}.cwc-hero__carousel-button--true-blue:hover{color:var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8))}.cwc-hero__carousel-indicators{position:absolute;bottom:.5rem;width:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;z-index:100}.cwc-hero__carousel-indicator{background:hsla(0,0%,100%,.5);width:1.5rem;height:.25rem;border:none;border-radius:.125rem;margin:0 .125rem;padding:0;cursor:pointer}.cwc-hero__carousel-indicator:focus{outline:none}.cwc-hero__carousel-indicator.current-indicator{background:var(--cwc-hero-carousel-current-indicator-background-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)))}.cwc-hero__carousel-indicator--bright{background:var(--cwc-hero-carousel-indicator-bright-background-color,var(--cwc-color-grayscale-black-alpha-fifty,rgba(0,0,0,.5)))}.cwc-hero__carousel-indicator--bright.current-indicator{background:var(--cwc-hero-carousel-current-indicator-bright-background-color,var(--cwc-color-grayscale-black-alpha-eighty,rgba(0,0,0,.8)))}.cwc-hero__carousel-indicator--true-blue{background-color:var(--cwc-color-ui-primary,#003876)!important;opacity:.6}.cwc-hero__carousel-indicator--true-blue.current-indicator{opacity:1}\\@media (max-width:767px){.cwc-hero__content{padding:2.25rem 2.75rem}}\";\n  }\n\n};\nexport { Hero as cwc_hero };","map":null,"metadata":{},"sourceType":"module"}