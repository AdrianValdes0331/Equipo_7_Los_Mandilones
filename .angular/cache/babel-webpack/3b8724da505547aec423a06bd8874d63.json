{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/session.service\";\nexport let CmxAPIInterceptor = /*#__PURE__*/(() => {\n  class CmxAPIInterceptor {\n    constructor(sessionService) {\n      this.sessionService = sessionService;\n      this.refreshTokenInProgress = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(httpRequest, next) {\n      httpRequest = this.addHeadersAtOnce(httpRequest);\n      return next.handle(httpRequest).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401 && !httpRequest.url.includes(\"token\")) {\n          //   return this.handle401Error(request, next);\n          if (this.refreshTokenInProgress) {\n            return this.refreshTokenSubject.pipe(filter(result => !!result), take(1), switchMap(result => {\n              console.log(\"intercept error\");\n              return next.handle(this.addHeadersAtOnce(httpRequest));\n            }));\n          } else {\n            this.refreshTokenInProgress = true; // cleaning the stream\n\n            this.refreshTokenSubject.next(null);\n            return this.sessionService.refreshToken().pipe(switchMap(values => {\n              this.refreshTokenInProgress = false;\n              this.refreshTokenSubject.next(values.access_token);\n              console.log(\"intercept ok\");\n              return next.handle(this.addHeadersAtOnce(httpRequest));\n            }));\n          }\n        } else {\n          console.log(\"intercept LL\");\n          return throwError(() => error);\n        }\n      }));\n    }\n    /**\r\n     * Add all the headers in one step\r\n     * @param request\r\n     */\n\n\n    addHeadersAtOnce(request) {\n      let clone = request.clone();\n      clone = this.addBearer(clone);\n      clone = this.addJWT(clone);\n      clone = this.addClientId(clone);\n      clone = this.addAppCode(clone);\n      return clone;\n    }\n\n    addBearer(request) {\n      // If we do not have a token yet then we should not set the header.\n      // Here we could first retrieve the token from where we store it.\n      if (!localStorage.getItem(\"bearer\")) {\n        return request;\n      } // If you are calling an outside domain then do not add the token.\n\n\n      const reg = new RegExp(`${environment.host}/`);\n\n      if (!request.url.match(reg)) {\n        return request;\n      }\n\n      return request.clone({\n        headers: request.headers.set(\"Authorization\", `Bearer ${localStorage.getItem(\"bearer\")}`)\n      });\n    }\n\n    addJWT(request) {\n      if (!localStorage.getItem(\"jwt\")) {\n        return request;\n      } // If you are calling an outside domain then do not add the token.\n\n\n      const reg = new RegExp(`${environment.host}/`);\n\n      if (!request.url.match(reg)) {\n        return request;\n      }\n\n      return request.clone({\n        headers: request.headers.set(\"jwt\", localStorage.getItem(\"jwt\"))\n      });\n    }\n\n    addClientId(request) {\n      // If you are calling an outside domain then do not add the token.\n      const reg = new RegExp(`${environment.host}/`);\n\n      if (!request.url.match(reg)) {\n        return request;\n      }\n\n      return request.clone({\n        headers: request.headers.set(\"x-ibm-client-id\", \"ba4ae518-258b-4b29-9d6f-8d77ab1cef7a\")\n      });\n    }\n\n    addAppCode(request) {\n      // If you are calling an outside domain then do not add the token.\n      const reg = new RegExp(`${environment.host}/`);\n\n      if (!request.url.match(reg)) {\n        return request;\n      }\n\n      return request.clone({\n        headers: request.headers.set(\"App-Code\", \"Foreman_App\")\n      });\n    }\n\n  }\n\n  CmxAPIInterceptor.ɵfac = function CmxAPIInterceptor_Factory(t) {\n    return new (t || CmxAPIInterceptor)(i0.ɵɵinject(i1.SessionService));\n  };\n\n  CmxAPIInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CmxAPIInterceptor,\n    factory: CmxAPIInterceptor.ɵfac\n  });\n  return CmxAPIInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}