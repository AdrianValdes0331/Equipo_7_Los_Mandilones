{"ast":null,"code":"import { r as registerInstance, c as createEvent, h, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst CwcRadioGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * When set to true the element is required and the label is decorated with an asterisk (*)\n     */\n\n    this.required = false;\n    /**\n     * Status of the form field.\n     */\n\n    this.status = 'regular';\n    /**\n     * When set to true the element is disabled\n     */\n\n    this.disabled = false;\n    /**\n     * Specify whether component should render from right to left\n     */\n\n    this.rtl = false;\n    /**\n     * When set to true the component doesn't render form-group wrapper\n     */\n\n    this.unwrap = false;\n    this.changeEvent = createEvent(this, \"cwcChange\", 7);\n  }\n  /**\n   * Call when component did load (lifecycle)\n   */\n\n\n  componentDidLoad() {\n    this.initAttributes();\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n  /**\n   * Initialize attributes & add event listener on slot change\n   */\n\n\n  initAttributes() {\n    this.radios = this.host.querySelectorAll('cwc-radio');\n    this.radios.forEach(item => {\n      if (this.value) {\n        item['checked'] = item['value'] === this.value;\n      }\n\n      item['disabled'] = this.disabled;\n      item['name'] = this.name;\n      item['status'] = this.status;\n      item['rtl'] = this.rtl;\n    });\n    this.registerSlotChangeHandler();\n  }\n  /**\n   * Register listener on event when radio are changed\n   */\n\n\n  registerSlotChangeHandler() {\n    const optionsSlot = this.host.shadowRoot.querySelector('slot');\n    optionsSlot.addEventListener('slotchange', () => {\n      this.radios = this.host.querySelectorAll('cwc-radio');\n    });\n  }\n  /**\n   * Method called on disabled changes\n   */\n\n\n  setDisabled(disabled) {\n    this.radios.forEach(item => {\n      item['disabled'] = disabled;\n    });\n  }\n  /**\n   * Method called on error changes\n   */\n\n\n  setError(error) {\n    this.radios.forEach(item => {\n      item['error'] = error !== null && error !== '';\n    });\n  }\n  /**\n   * Method called on rtl changes\n   */\n\n\n  setRtl(rtl) {\n    this.radios.forEach(item => {\n      item['rtl'] = rtl;\n    });\n  }\n  /**\n   * Method called on value changes\n   */\n\n\n  setValue(newValue, oldValue) {\n    if (oldValue !== newValue) {\n      this.radios.forEach(item => {\n        item['checked'] = item['value'] === newValue;\n      });\n    }\n  }\n  /**\n   * Method called on status changes, passing status on children elements\n   */\n\n\n  setStatus(newValue, oldValue) {\n    if (oldValue !== newValue) {\n      this.radios.forEach(item => {\n        item['status'] = newValue;\n      });\n    }\n  }\n  /**\n   * Triggered when radio is changed. Event emitted in cwc-radio\n   * @param event Event details\n   */\n\n\n  updateChecked(event) {\n    event.stopPropagation();\n\n    if (this.disabled) {\n      return;\n    }\n\n    this.value = event.detail;\n    this.changeEvent.emit(this.value);\n    this.radios.forEach(item => {\n      item['checked'] = item['value'] === this.value;\n    });\n  }\n  /**\n   * Triggered when some key pressed which focused on radio\n   * @param event Custom event with the key pressed\n   */\n\n\n  keyboardChecked(event) {\n    const values = [];\n    this.radios.forEach(radio => values.push(radio.value));\n    this.itemIndex = values.indexOf(this.value);\n\n    if (['ArrowUp', 'ArrowLeft'].includes(event.detail)) {\n      this.checkPrevRadio();\n    } else if (['ArrowDown', 'ArrowRight'].includes(event.detail)) {\n      this.checkNextRadio();\n    }\n\n    this.initAttributes();\n  }\n\n  checkPrevRadio() {\n    if (this.itemIndex !== -1 && this.itemIndex !== 0) {\n      this.value = this.itemIndex;\n    }\n  }\n\n  checkNextRadio() {\n    if (this.itemIndex !== -1 && this.radios.length - 1 > this.itemIndex) {\n      this.value = this.itemIndex + 2;\n    }\n  }\n\n  render() {\n    const radioGroupComponent = h(\"div\", {\n      class: `cwc-radio-group ${this.designVersion}`\n    }, h(\"slot\", null));\n    return this.unwrap ? radioGroupComponent : h(\"cwc-form-group\", {\n      role: \"radiogroup\",\n      label: this.label,\n      required: this.required,\n      status: this.status,\n      statusMessage: this.statusMessage,\n      style: {\n        width: '100%'\n      },\n      designVersion: this.designVersion\n    }, radioGroupComponent);\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disabled\": [\"setDisabled\"],\n      \"error\": [\"setError\"],\n      \"rtl\": [\"setRtl\"],\n      \"value\": [\"setValue\"],\n      \"status\": [\"setStatus\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}\";\n  }\n\n};\nexport { CwcRadioGroup as cwc_radio_group };","map":null,"metadata":{},"sourceType":"module"}