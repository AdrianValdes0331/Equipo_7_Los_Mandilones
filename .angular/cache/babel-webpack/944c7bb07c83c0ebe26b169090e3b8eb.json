{"ast":null,"code":"import { r as registerInstance, c as createEvent, h, H as Host } from './core-85189c77.js';\nconst TableRow = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Specify if the the row is expandable\n     */\n\n    this.expandable = false;\n    /**\n     * Specify if the detail is visible or not\n     */\n\n    this.expanded = false;\n    this.isExpanded = false;\n\n    this.handleExpand = () => {\n      this.isExpanded = !this.isExpanded;\n      this.expandEvent.emit(this.isExpanded);\n    };\n\n    this.expandEvent = createEvent(this, \"cwcExpand\", 7);\n  }\n\n  updateExpandedValue(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.isExpanded = newValue;\n    }\n  }\n\n  render() {\n    return h(Host, {\n      class: this.designVersion,\n      role: \"row\"\n    }, h(\"slot\", null), this.expandable && h(\"cwc-td\", {\n      designVersion: this.designVersion,\n      class: 'expandable-icon' + (this.isExpanded ? ' expandable-icon--opened' : '')\n    }, h(\"cwc-icon\", {\n      name: this.isExpanded ? 'collapse' : 'expand',\n      id: \"expandableIcon\",\n      onClick: this.handleExpand,\n      color: \"bright-blue\",\n      designVersion: this.designVersion\n    })));\n  }\n\n  static get watchers() {\n    return {\n      \"expanded\": [\"updateExpandedValue\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}cwc-tr{display:table-row;vertical-align:inherit;border-color:inherit}\";\n  }\n\n};\nexport { TableRow as cwc_tr };","map":null,"metadata":{},"sourceType":"module"}