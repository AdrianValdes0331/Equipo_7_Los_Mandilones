{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport moment from \"moment\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport * as i0 from \"@angular/core\";\nexport function createInitialState() {\n  return {\n    oauth2: null,\n    jwt: null,\n    environment: \"dev2.cemexgo.com\",\n    deviceLanguage: navigator.language,\n    // tslint:disable-next-line: max-line-length\n    userLanguage: localStorage.getItem(\"language\") === undefined || localStorage.getItem(\"language\") === null ? \"en_US\" : localStorage.getItem(\"language\"),\n    isRTL: 0\n  };\n}\nlet CmxAppStore = class CmxAppStore extends EntityStore {\n  constructor() {\n    super(createInitialState());\n    localStorage.setItem(\"env\", this.getValue().environment);\n  }\n  /**\r\n   * saves the tokens into the working state, this method also saves the tokens to the\r\n   * persistant localstorage to continue after user closes the app\r\n   * @param jwts\r\n   * @param token\r\n   */\n\n\n  setTokens(jwts, token) {\n    this.update(state => Object.assign(Object.assign({}, state), {\n      jwt: jwts,\n      oauth2: token\n    }));\n    localStorage.setItem(\"jwt\", jwts);\n    localStorage.setItem(\"bearer\", token.access_token);\n    localStorage.setItem(\"refresh_token\", token.refresh_token); // we remove 15 minutes to avoid problems with mobile interactions\n\n    localStorage.setItem(\"expiration\", moment().add(token.expires_in - 60 * 15, \"seconds\").toString());\n  }\n  /**\r\n   * this method is called internally in the app to set and save the device\r\n   * language\r\n   * @param language language from the device\r\n   */\n\n\n  setDeviceLanguage(language) {\n    // first split the first 2 characters to see the main language\n    const mainLanguage = navigator.language.substr(0, 2);\n    this.update(state => Object.assign(Object.assign({}, state), {\n      deviceLanguage: language\n    }));\n  }\n  /**\r\n   * set the language from the user configurations, commonly brought by the token API\r\n   * @param language\r\n   */\n\n\n  setUserLanguage(language) {\n    // also update the default configuration from our data set\n    localStorage.setItem(\"language\", language);\n    this.update(state => Object.assign(Object.assign({}, state), {\n      userLanguage: language\n    }));\n  }\n  /**\r\n   * set the language text direction for the entire application\r\n   * @param isRTL\r\n   * 0 is undefined, 1 is LTR and 2 is RTL\r\n   */\n\n\n  setRTL(zisRTL) {\n    this.update(state => Object.assign(Object.assign({}, state), {\n      isRTL: zisRTL\n    }));\n  }\n  /**\r\n   * this method destroys the current session of the user for logging out purposes\r\n   */\n\n\n  logout() {\n    createInitialState();\n    localStorage.removeItem(\"jwt\");\n    localStorage.removeItem(\"bearer\");\n  }\n\n};\n\nCmxAppStore.ɵfac = function CmxAppStore_Factory(t) {\n  return new (t || CmxAppStore)();\n};\n\nCmxAppStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CmxAppStore,\n  factory: CmxAppStore.ɵfac,\n  providedIn: \"root\"\n});\nCmxAppStore = __decorate([StoreConfig({\n  name: \"cmxApp\"\n})], CmxAppStore);\nexport { CmxAppStore };","map":null,"metadata":{},"sourceType":"module"}