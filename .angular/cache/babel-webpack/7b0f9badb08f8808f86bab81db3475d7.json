{"ast":null,"code":"import _asyncToGenerator from \"D:/Equipo_7_Los_Mandilones/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst CodeValidator = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.valueCheck = [false, false, false, false];\n    this.hasAllValues = false;\n    this.values = [];\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Number of digits to be entered\n     */\n\n    this.numberOfDigits = '4';\n\n    this.validateInput = event => {\n      // change focus\n      if (event.data) {\n        event.target.blur();\n\n        if (event.target.nextSibling) {\n          event.target.nextSibling.focus();\n        }\n      } // check if all inputs have value\n\n\n      const fields = Array.prototype.slice.call(this.wrapperElement.children);\n\n      for (let i = 0; i < fields.length; i++) {\n        if (fields[i].value !== '') {\n          this.valueCheck[i] = true;\n          this.values[i] = parseInt(fields[i].value, 10);\n        } else {\n          this.valueCheck[i] = false;\n        }\n      } // emit validationEvent in case all digits are set\n\n\n      this.hasAllValues = this.valueCheck.every(x => x);\n\n      if (this.hasAllValues) {\n        this.validationEvent.emit(this.values);\n      }\n    };\n\n    this.keyCheck = event => {\n      const KeyID = event.keyCode;\n\n      switch (KeyID) {\n        case 8:\n          this.focusPrevious(event.target.shadowRoot.activeElement);\n          break;\n\n        case 46:\n          this.focusPrevious(event.target.shadowRoot.activeElement);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.focusPrevious = element => {\n      if (element.value === '' && element.previousSibling) {\n        element.previousSibling.focus();\n      }\n    };\n\n    this.validationEvent = createEvent(this, \"cwcCodeValidation\", 7);\n  }\n  /**\n   * Returns array of values\n   */\n\n\n  getCode() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.values;\n    })();\n  }\n  /**\n   * Returns array of values\n   */\n\n\n  resetCode() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const fields = Array.prototype.slice.call(_this2.wrapperElement.children);\n      fields.forEach(el => {\n        el.value = '';\n        _this2.values = [];\n      });\n    })();\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n    this.host.addEventListener('keydown', this.keyCheck);\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n    this.host.removeEventListener('keydown', this.keyCheck);\n  }\n\n  render() {\n    const input = () => {\n      return h(\"input\", {\n        class: `cwc-code-validator__input digits-${this.numberOfDigits}`,\n        type: \"text\",\n        pattern: \"[0-9]\",\n        maxlength: \"1\",\n        inputmode: \"numeric\",\n        onInput: this.validateInput\n      });\n    };\n\n    const renderInputs = () => {\n      return Array.apply(null, {\n        length: parseInt(this.numberOfDigits, 10)\n      }).map(() => input());\n    };\n\n    return h(Host, null, h(\"div\", {\n      class: `cwc-code-validator ${this.designVersion}`,\n      ref: el => this.wrapperElement = el\n    }, renderInputs()));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:block}.cwc-code-validator{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}.cwc-code-validator__input{font-family:inherit;height:64px;width:60px;background-color:var(--cwc-code-validator-input-background-color,var(--cwc-color-grayscale-white,#fff));margin:.25rem;color:var(--cwc-code-validator-color,var(--cwc-color-grayscale-black,#000));font-size:1.75rem;font-weight:700;text-align:center;border:1px solid var(--cwc-code-validator-border-color,var(--cwc-color-elements-input-border,#adaebb));border-radius:8px;padding:0}.cwc-code-validator__input.digits-6{width:34px}.cwc-code-validator__input:focus{outline:none;border-color:var(--cwc-code-validator-active-border-color,var(--cwc-color-links,#3fa9f5))}\";\n  }\n\n};\nexport { CodeValidator as cwc_code_validator };","map":null,"metadata":{},"sourceType":"module"}