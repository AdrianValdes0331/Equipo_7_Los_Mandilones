{"ast":null,"code":"import { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState'; // @internal\n\nexport function isEntityState(state) {\n  return state.entities && state.ids;\n} // @internal\n\nfunction applyMiddleware(entities, preAddEntity) {\n  let mapped = {};\n\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n\n  return mapped;\n} // @internal\n\n\nexport function setEntities({\n  state,\n  entities,\n  idKey,\n  preAddEntity,\n  isNativePreAdd\n}) {\n  let newEntities;\n  let newIds;\n\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => isNaN(id) ? id : Number(id));\n  }\n\n  const newState = { ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n\n  return newState;\n} //# sourceMappingURL=setEntities.js.map","map":null,"metadata":{},"sourceType":"module"}