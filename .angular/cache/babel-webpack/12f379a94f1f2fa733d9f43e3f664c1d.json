{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../states/app.store\";\nimport * as i3 from \"../queries/app.queries\";\nexport class TranslationSet {\n  constructor() {\n    this.values = {};\n  }\n\n}\nexport let TranslationService = /*#__PURE__*/(() => {\n  class TranslationService {\n    constructor(http, appStore, appQueries) {\n      this.http = http;\n      this.appStore = appStore;\n      this.appQueries = appQueries;\n      this.appQueries.selectUserLanguage$.subscribe(value => {\n        this.loadTranslations();\n      });\n    }\n\n    loadTranslations() {\n      return new Promise(resolve => {\n        if (localStorage.getItem(\"language\") === null || localStorage.getItem(\"language\") === undefined) {\n          this.http.get(`/assets/locale/en_US.json`).subscribe(value => {\n            this.rawTranslations = value;\n            resolve(true);\n          });\n        } else {\n          /*\r\n          ToDo: Here we could check if language is loaded previously\r\n          */\n          this.http.get(`/assets/locale/${localStorage.getItem(\"language\")}.json`).subscribe(value => {\n            this.rawTranslations = value;\n            resolve(true);\n          });\n        }\n      });\n    }\n\n    getTranslation(key) {\n      if (this.rawTranslations[key] === null || this.rawTranslations[key] === undefined) {\n        return `NOT:${key}`;\n      }\n\n      return this.rawTranslations[key] || \"\";\n    }\n\n  }\n\n  TranslationService.ɵfac = function TranslationService_Factory(t) {\n    return new (t || TranslationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CmxAppStore), i0.ɵɵinject(i3.CmxAppQuery));\n  };\n\n  TranslationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslationService,\n    factory: TranslationService.ɵfac\n  });\n  return TranslationService;\n})();","map":null,"metadata":{},"sourceType":"module"}