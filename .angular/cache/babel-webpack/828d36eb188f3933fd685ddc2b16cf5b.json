{"ast":null,"code":"import { r as registerInstance, h, H as Host, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst Tooltip = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.hidden = true;\n    this.layerStyle = {};\n    this.orientation = 'top';\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * disables the tooltip funcitonality\n     */\n\n    this.disabled = false;\n    /**\n     * Specify whether component should render from right to left\n     */\n\n    this.rtl = false;\n    /**\n     * Specify whether component should render as block or inline element\n     */\n\n    this.block = false; // this funciton shows the tooltip\n\n    this.showTooltip = () => {\n      if (!this.disabled) {\n        setTimeout(() => {\n          document.addEventListener('scroll', this.hideTooltip, true);\n          document.addEventListener('cwcScroll', this.hideTooltip, true);\n          window.addEventListener('resize', this.hideTooltip);\n        });\n        this.positionTooltip();\n        this.layerStyle = Object.assign({}, this.layerStyle);\n        this.hidden = false;\n        this.layer.classList.add('fadeout');\n        this.layer.classList.remove('cwc-hidden');\n      }\n    }; // this funciton hides the tooltip\n\n\n    this.hideTooltip = () => {\n      this.hidden = true;\n      document.removeEventListener('scroll', this.hideTooltip, true);\n      document.removeEventListener('cwcScroll', this.hideTooltip, true);\n      window.removeEventListener('resize', this.hideTooltip);\n      this.layer.classList.remove('fadeout');\n      this.layer.classList.add('cwc-hidden');\n    };\n\n    this.positionTooltip = () => {\n      // find position on screen\n      const elementDimensions = this.targetElement.getBoundingClientRect(); // get tooltip dimensions\n\n      const layerDimensions = this.layer.getBoundingClientRect(); // get window width\n\n      const windowDimensions = {\n        width: document.documentElement.clientWidth\n      }; // define base tooltip style\n\n      const layerStyle = {\n        left: '',\n        top: ''\n      };\n      let caseString;\n      let sideValue;\n      sideValue = elementDimensions.left + layerDimensions.width / 2; // define the overflow scenario for a particular class and the positioning switch\n\n      if (elementDimensions.top > layerDimensions.height && elementDimensions.left > layerDimensions.width / 2 && windowDimensions.width > sideValue) {\n        caseString = 'top';\n      }\n\n      if (elementDimensions.top < layerDimensions.height && elementDimensions.left > layerDimensions.width / 2 && windowDimensions.width > sideValue) {\n        caseString = 'bottom';\n      }\n\n      if (elementDimensions.left < layerDimensions.width / 2) {\n        caseString = 'right';\n      }\n\n      if (windowDimensions.width < sideValue) {\n        caseString = 'left';\n      } // get the top left values with the orientation string\n\n\n      const topleft = this.getOrientation(`${caseString}`, elementDimensions, layerDimensions); // assign the new layer style\n\n      const fullStyle = Object.assign(Object.assign({}, layerStyle), topleft);\n      this.setLayerStyle(fullStyle); // assign the orientation for custom orientation classes\n\n      this.setOrientation(caseString);\n    };\n\n    this.setOrientation = orientation => {\n      this.orientation = orientation;\n      this.layer.classList.remove('top', 'bottom', 'left', 'right');\n      this.layer.classList.add(orientation);\n    };\n\n    this.setLayerStyle = layerStyles => {\n      const fullStyle = Object.assign({}, layerStyles);\n      Object.keys(fullStyle).forEach(style => {\n        this.layer.style[style] = fullStyle[style];\n      });\n    };\n  }\n\n  setWidth(newValue, oldValue) {\n    if (oldValue !== newValue) {\n      this.width = newValue;\n    }\n  }\n\n  setHeight(newValue, oldValue) {\n    if (oldValue !== newValue) {\n      this.height = newValue;\n    }\n  }\n\n  setContent(newValue) {\n    document.getElementById(this.tooltipId).innerHTML = newValue;\n  }\n\n  getOrientation(key, elementDimensions, layerDimensions) {\n    const formulas = new Map();\n    formulas.set('top', {\n      left: elementDimensions.left + (elementDimensions.width - layerDimensions.width) / 2 + 'px',\n      top: elementDimensions.top - layerDimensions.height - 8 + 'px'\n    });\n    formulas.set('bottom', {\n      left: elementDimensions.left + elementDimensions.width / 2 - layerDimensions.width / 2 + 'px',\n      top: elementDimensions.top + elementDimensions.height + 2 + 'px'\n    });\n    formulas.set('left', {\n      left: elementDimensions.left - layerDimensions.width - 6 + 'px',\n      top: elementDimensions.top + elementDimensions.height / 2 - layerDimensions.height / 2 + 'px'\n    });\n    formulas.set('right', {\n      left: elementDimensions.left + elementDimensions.width + 6 + 'px',\n      top: elementDimensions.top + elementDimensions.height / 2 - layerDimensions.height / 2 + 'px'\n    });\n    return formulas.get(key);\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n  }\n\n  componentDidLoad() {\n    // we are creating the tooltip the old DOM manipulation way to be able to render it as the last element\n    // of the page, so that we can position it over any element of the DOM\n    const destination = document.createElement('div'); // store layer ref for later manipulation\n\n    this.layer = destination; // set layer attributes\n\n    destination.setAttribute('role', 'dialog');\n    this.ariaLabel && destination.setAttribute('aria-label', this.ariaLabel);\n    destination.setAttribute('aria-modal', 'true'); // give it unique id\n\n    this.tooltipId = 'tooltip_' + Math.random().toString(36).substr(2, 9);\n    destination.setAttribute('id', this.tooltipId); // set the proper class\n\n    destination.classList.add('cwc-tooltip', this.designVersion, 'fadeout', this.hidden ? 'cwc-hidden' : '', this.orientation); // set content\n\n    if (this.content) {\n      destination.innerHTML = this.content;\n    } else {\n      destination.appendChild(this.contentElement);\n    } // append it to the body\n\n\n    document.querySelector('body').appendChild(destination);\n    initBasics(this);\n  }\n\n  disconnectedCallback() {\n    this.layer.parentNode.removeChild(this.layer);\n    destroyBasics(this);\n  }\n\n  render() {\n    return h(Host, {\n      class: `${this.designVersion} ${this.block && 'block'}`\n    }, h(\"div\", {\n      ref: el => this.targetElement = el,\n      class: 'cwc-tooltip__target' + (this.disabled ? ' disabled' : ''),\n      style: {\n        display: this.block ? 'block' : 'inline-block'\n      },\n      onMouseEnter: this.showTooltip,\n      onMouseLeave: this.hideTooltip\n    }, h(\"slot\", null)), h(\"div\", {\n      ref: el => this.contentElement = el\n    }, h(\"slot\", {\n      name: \"content\"\n    })));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"width\": [\"setWidth\"],\n      \"height\": [\"setHeight\"],\n      \"content\": [\"setContent\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}cwc-tooltip{display:inline-block}cwc-tooltip.block{display:block}.cwc-tooltip{display:table;max-width:25vw;border:1px solid var(--cwc-tooltip-border-color,var(--cwc-color-grayscale-dark,#333));border-radius:3px;color:var(--cwc-tooltip-color,var(--cwc-color-grayscale-lightest,#e4e4e4));font-size:.75rem;line-height:.875rem;background:var(--cwc-tooltip-background-color,var(--cwc-color-grayscale-dark,#333));padding:.5rem 1rem;position:fixed;font-weight:500;text-align:center;z-index:999;pointer-events:none}.cwc-tooltip__target,.cwc-tooltip__target>slot{display:inline-block}.cwc-tooltip.cwc-hidden{opacity:0}.cwc-tooltip:before{content:\\\"\\\";position:absolute;width:0;height:0;margin-left:-9px;bottom:-13px;left:50%;-webkit-box-sizing:border-box;box-sizing:border-box;border:6px solid #000;border-color:transparent transparent var(--cwc-color-grayscale-dark,#333) var(--cwc-color-grayscale-dark,#333);-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.cwc-tooltip.bottom:before{border-color:var(--cwc-color-grayscale-dark,#333) var(--cwc-color-grayscale-dark,#333) transparent transparent;bottom:auto;top:0}.cwc-tooltip.right:before{border-color:var(--cwc-color-grayscale-dark,#333) transparent transparent var(--cwc-color-grayscale-dark,#333);bottom:auto;left:1px;top:50%}.cwc-tooltip.left:before{border-color:transparent var(--cwc-color-grayscale-dark,#333) var(--cwc-color-grayscale-dark,#333) transparent;bottom:auto;right:-4px;top:50%;left:auto}.cwc-tooltip:not(.cwc-hidden){-webkit-animation:fadein .15s;animation:fadein .15s}.cwc-tooltip:not(.fadeout){-webkit-animation:fadeout .15s;animation:fadeout .15s}\\@-webkit-keyframes fadein{0%{opacity:0}to{opacity:1}}\\@keyframes fadein{0%{opacity:0}to{opacity:1}}\\@-webkit-keyframes fadeout{0%{opacity:1}to{opacity:0}}\\@keyframes fadeout{0%{opacity:1}to{opacity:0}}\\@media (max-width:767px){.cwc-tooltip{max-width:50vw}}\";\n  }\n\n};\nexport { Tooltip as cwc_tooltip };","map":null,"metadata":{},"sourceType":"module"}