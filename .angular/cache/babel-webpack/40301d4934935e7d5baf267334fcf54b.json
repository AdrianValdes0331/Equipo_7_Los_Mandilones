{"ast":null,"code":"import { r as registerInstance, h, H as Host, g as getElement, c as createEvent } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst EmptyResult = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Specify whether component should render from right to left.\n     */\n\n    this.rtl = false;\n    /**\n     * Specify whether component has elevation and shadow or is it\n     */\n\n    this.variant = 'regular';\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n\n  render() {\n    return h(Host, {\n      \"aria-live\": \"polite\",\n      class: `cwc-empty-result ${this.designVersion}`,\n      role: \"alert\"\n    }, h(\"div\", {\n      class: 'cwc-empty-result__wrapper ' + this.variant\n    }, this.icon && h(\"cwc-icon\", {\n      designVersion: this.designVersion,\n      name: this.icon,\n      color: \"disabled-grey\",\n      size: \"48px\"\n    }), h(\"h1\", {\n      class: \"cwc-empty-result__header\"\n    }, this.header), h(\"h2\", {\n      class: \"cwc-empty-result__content\"\n    }, h(\"slot\", null))));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.cwc-empty-result{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:safe center;justify-content:safe center}.cwc-empty-result__wrapper{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;text-align:center;padding:41px 20px 57px;border-radius:3px;background-color:var(--cwc-empty-result-wrapper-background-color,var(--cwc-color-grayscale-white,#fff));-webkit-box-shadow:0 2px 4px 0 rgba(0,0,0,.06);box-shadow:0 2px 4px 0 rgba(0,0,0,.06)}.cwc-empty-result__wrapper.flat{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.cwc-empty-result__header{color:var(--cwc-empty-result-header-color,var(--cwc-color-grayscale-medium,#666));font-family:inherit;font-size:2rem;font-weight:500;line-height:2rem;margin:0}.cwc-empty-result__content{color:var(--cwc-empty-result-content-color,var(--cwc-color-grayscale-medium,#666));font-family:inherit;font-size:.875rem;font-weight:500;line-height:1rem}::slotted(a){color:var(--cwc-empty-result-link-color,var(--cwc-color-links,#3fa9f5))}::slotted(a:hover){color:var(--cwc-empty-result-link-hover-color,var(--cwc-color-links-dark,#01579b))}::slotted(a:focus){color:var(--cwc-empty-result-link-focus-color,var(--cwc-color-links-dark,#01579b));outline:none}:host([data-dir=rtl]) .cwc-empty-result__content,:host([data-dir=rtl]) .cwc-empty-result__header{font-family:inherit}\";\n  }\n\n};\nconst Modal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scrollable = false;\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Opens and closes the modal\n     */\n\n    this.open = false;\n    /**\n     * Sets z-index of the overlay element\n     */\n\n    this.overlayZIndex = 'auto';\n    /**\n     * Determines if content should be rendered in RTL mode\n     */\n\n    this.rtl = false;\n    /**\n     * Closes modal on backdrop click\n     */\n\n    this.closeOnBdClick = true;\n    /**\n     * Shows close icon button\n     */\n\n    this.showCloseBtn = true;\n    /**\n     * In responsive modal opends in full width or with margin on both sides\n     */\n\n    this.fullWidthResponsive = true;\n\n    this.handleClose = e => {\n      // determine if the click is within the content slot that's within the overlay\n      const path = e.composedPath(); // sometimes we send a fake event without composed path when we hide the overlay by prop\n      // therefore we force the \"clickoutside\" by just saying it was outside\n\n      const isWithin = path ? this.isWithin(this.modalElement, path) : false;\n\n      if (!isWithin) {\n        this.closeModal();\n      }\n    };\n\n    this.closeModal = () => {\n      this.open = false;\n      this.closeEvent.emit();\n    };\n\n    this.checkForScrolling = () => {\n      // this function allows us to set the proper state for the content area\n      // in terms of it's height compared to the content height\n      // we must do this as max-height css property distorts the way height is read\n      // so that modal elements with small content have automatic height instead\n      // of the 70% of theheight of the window\n      const modalElementHeight = Math.floor(this.modalElement.getBoundingClientRect().height);\n      const contentViewportHeight = Math.floor(this.contentViewport.getBoundingClientRect().height);\n      const contentAreaHeight = Math.floor(this.contentArea.getBoundingClientRect().height);\n      const headerAndFooterHeight = Math.floor(this.contentHeader.getBoundingClientRect().height + this.contentFooter.getBoundingClientRect().height);\n      this.scrollable = contentViewportHeight > modalElementHeight || modalElementHeight - headerAndFooterHeight < contentAreaHeight;\n    };\n\n    this.mutationHandler = () => {\n      this.checkForScrolling();\n    };\n\n    this.closeEvent = createEvent(this, \"cwcClose\", 7);\n    this.openEvent = createEvent(this, \"cwcOpen\", 7);\n    this.loadedEvent = createEvent(this, \"cwcLoaded\", 7);\n  }\n\n  setScroll(open) {\n    if (open) {\n      this.checkForScrolling();\n      setTimeout(() => {\n        window.addEventListener('resize', this.checkForScrolling);\n\n        if (this.closeOnBdClick) {\n          window.addEventListener('click', this.handleClose);\n        }\n      });\n      this.openEvent.emit();\n    } else {\n      window.removeEventListener('resize', this.checkForScrolling);\n      window.removeEventListener('click', this.handleClose);\n    }\n  }\n\n  handleEscapeKey(ev) {\n    if (this.open && ev.key === 'Escape') {\n      this.closeModal();\n    }\n  } // this function determines if an element is within another\n\n\n  isWithin(parent, path) {\n    for (const element of path) {\n      if (parent === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n  }\n\n  componentDidLoad() {\n    this.contentMain.addEventListener('animationend', () => {\n      this.loadedEvent.emit(true);\n    }); // anddd an event listener for when the options change\n\n    setTimeout(() => {\n      // HERE WE ADD A MUTATION OBSERVER TO LISTEN FOR MODAL CONTENT CHANGES\n      // SO THAT WHEN IT CHANGES, WE RESIZE ACCORDINGLY\n      // Options for the observer (which mutations to observe)\n      const observerConfig = {\n        attributes: true,\n        attributeOldValue: false,\n        childList: true,\n        subtree: true,\n        characterData: true\n      }; // Create an observer instance linked to the callback function\n\n      this.contentMutation = new MutationObserver(this.mutationHandler); // Start observing the target node for configured mutations\n\n      this.contentMutation.observe(this.host, observerConfig);\n    }, 0);\n  }\n\n  disconnectedCallback() {\n    this.contentMain && this.contentMain.removeEventListener('animationend', () => {\n      this.loadedEvent.emit(true);\n    }); // KILL MUTATION OBSERVER\n\n    this.contentMutation && this.contentMutation.disconnect();\n    destroyBasics(this);\n  }\n\n  render() {\n    return h(Host, {\n      class: `cwc-modal ${this.designVersion} ${this.open && 'cwc-modal--visible'}`,\n      style: {\n        zIndex: this.overlayZIndex\n      }\n    }, h(\"div\", {\n      class: \"cwc-modal__overlay\"\n    }, h(\"cwc-focus-trap\", {\n      active: this.open,\n      class: 'cwc-modal__container' + (this.scrollable ? ' scrollable' : '') + (this.fullWidthResponsive ? ' cwc-modal__container--full-width' : ''),\n      ref: element => this.modalElement = element,\n      role: \"dialog\",\n      \"aria-modal\": \"true\",\n      \"aria-label\": this.ariaLabel,\n      tabindex: \"-1\"\n    }, this.showCloseBtn && h(\"cwc-icon\", {\n      class: \"cwc-modal__close-button\",\n      name: \"close\",\n      size: \"24px\",\n      color: \"bright-blue\",\n      onClick: () => this.closeModal(),\n      designVersion: this.designVersion\n    }), h(\"div\", {\n      class: \"cwc-modal__content\",\n      ref: el => {\n        this.contentViewport = el;\n      }\n    }, h(\"div\", {\n      class: \"cwc-modal__content-header\",\n      ref: el => {\n        this.contentHeader = el;\n      }\n    }, h(\"slot\", {\n      name: \"header\"\n    })), h(\"div\", {\n      class: \"cwc-modal__content-main\",\n      ref: element => this.contentMain = element\n    }, h(\"div\", {\n      class: \"cwc-modal__content-area\",\n      ref: el => {\n        this.contentArea = el;\n      }\n    }, h(\"slot\", null))), h(\"div\", {\n      class: \"cwc-modal__content-footer\",\n      ref: el => {\n        this.contentFooter = el;\n      }\n    }, h(\"slot\", {\n      name: \"footer\"\n    }))))));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"open\": [\"setScroll\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}[dir=ltr] :host{left:0}[dir=rtl] :host{right:0}:host{pointer-events:none;opacity:0;position:fixed;inset-inline-start:0;bottom:0;width:100vw;height:100vh;height:-webkit-fill-available;-webkit-transform:translateZ(0);transform:translateZ(0)}:host(.cwc-modal--visible){pointer-events:all;opacity:1}:host(.cwc-modal--visible) .cwc-modal__overlay{opacity:1;visibility:visible;-webkit-transition:opacity .33s;transition:opacity .33s;-webkit-transform:translateX(0);transform:translateX(0)}:host(.cwc-modal--visible) .cwc-modal__container{-webkit-animation-name:modalScale;animation-name:modalScale;-webkit-animation-duration:.33s;animation-duration:.33s}:host(.cwc-modal--visible) .cwc-modal__content-main{-webkit-animation-name:contentOpacity;animation-name:contentOpacity;-webkit-animation-duration:1s;animation-duration:1s}.cwc-modal__overlay{opacity:0;position:relative;width:100%;height:100%;-webkit-transition:opacity .5s;transition:opacity .5s;background:var(--cwc-modal-overlay-background-color,var(--cwc-color-grayscale-black-alpha-twentyfive,rgba(0,0,0,.25)));display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-webkit-transform:translateX(-100vw);transform:translateX(-100vw)}\\@media (max-width:767px){.cwc-modal__overlay{height:auto;min-height:100vh;min-height:-webkit-fill-available}}.cwc-modal__container{background-color:var(--cwc-modal-background-color,var(--cwc-color-grayscale-white,#fff));background-image:var(--cwc-modal-background-image,none);background-position:var(--cwc-modal-background-position,center center);background-size:var(--cwc-modal-background-size,auto);background-repeat:var(--cwc-modal-background-repeat,no-repeat);position:relative;width:100vw;max-width:var(--cwc-modal-max-width,784px);max-height:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-webkit-box-shadow:none;box-shadow:none;border-style:var(--cwc-modal-border-style,none);border-width:var(--cwc-modal-border-width,0);border-color:var(--cwc-modal-border-color,transparent);border-radius:var(--cwc-modal-border-radius,0)}\\@media (min-width:768px){.cwc-modal__container{-webkit-box-shadow:var(--cwc-modal-box-shadow,0 1px 3px var(--cwc-color-grayscale-black-alpha-twentyfive,rgba(0,0,0,.25)));box-shadow:var(--cwc-modal-box-shadow,0 1px 3px var(--cwc-color-grayscale-black-alpha-twentyfive,rgba(0,0,0,.25)));max-height:var(--cwc-modal-max-height,70vh)}}\\@media (max-width:767px){.cwc-modal__container{max-width:100vw;max-height:100vh;width:calc(100% - 64px);margin:0 auto}.cwc-modal__container--full-width{width:100%}}.cwc-modal__container.scrollable{height:100%}\\@media (max-width:767px){.cwc-modal__container.scrollable{height:100vh}}.cwc-modal__container.scrollable .cwc-modal__content-main{overflow:scroll;overflow-x:hidden;overflow-y:auto;border-top:1px solid var(--cwc-modal-content-main-border-color,var(--cwc-color-elements-input-border,#adaebb));border-bottom:1px solid var(--cwc-modal-content-main-border-color,var(--cwc-color-elements-input-border,#adaebb));border-block:1px solid var(--cwc-modal-content-main-border-color,var(--cwc-color-elements-input-border,#adaebb))}.cwc-modal__content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;height:100%}.cwc-modal__content-header{-ms-flex:0 0 auto;flex:0 0 auto;padding:2.5rem 2.5rem .75rem;position:relative}.cwc-modal__content-main{-ms-flex:1 1 auto;flex:1 1 auto;margin:0 2.5rem;position:relative}.cwc-modal__content-area{min-height:100%;display:-ms-flexbox;display:flex}.cwc-modal__content-area>slot{display:block;height:100%;width:100%}[dir=ltr] .cwc-modal__content-footer{text-align:right}[dir=rtl] .cwc-modal__content-footer{text-align:left}.cwc-modal__content-footer{position:relative;-ms-flex:0 0 auto;flex:0 0 auto;padding:.75rem 2.5rem 2.5rem;text-align:end}\\@media (max-width:767px){.cwc-modal__content-footer{padding-bottom:4.5rem}}[dir=ltr] .cwc-modal__close-button{right:24px}[dir=rtl] .cwc-modal__close-button{left:24px}.cwc-modal__close-button{position:absolute;inset-inline-end:24px;top:24px;cursor:pointer;-webkit-transition:all .3s ease;transition:all .3s ease;z-index:1}.cwc-modal__close-button:hover{color:var(--cwc-modal-close-button-hover-color,var(--cwc-color-grayscale-light,#d6d6d6));-webkit-transition:all .3s ease;transition:all .3s ease}\\@-webkit-keyframes modalScale{0%{-webkit-transform:scale(.8);transform:scale(.8);opacity:.5}to{-webkit-transform:scale(1);transform:scale(1);opacity:1}}\\@keyframes modalScale{0%{-webkit-transform:scale(.8);transform:scale(.8);opacity:.5}to{-webkit-transform:scale(1);transform:scale(1);opacity:1}}\\@-webkit-keyframes contentOpacity{0%{opacity:0}15%{opacity:0}to{opacity:1}}\\@keyframes contentOpacity{0%{opacity:0}15%{opacity:0}to{opacity:1}}\";\n  }\n\n};\nexport { EmptyResult as cwc_empty_result, Modal as cwc_modal };","map":null,"metadata":{},"sourceType":"module"}