{"ast":null,"code":"import _asyncToGenerator from \"D:/Equipo_7_Los_Mandilones/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst CwcSnackbar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * State of the snackbar - if it is visible or not\n     */\n\n    this.hide = true;\n    /**\n     * Specify duration as a number in miliseconds. Default is 10000 (10 sec)\n     */\n\n    this.autoHideDuration = 10000;\n    /**\n     * Allow snackbar to automatically close\n     */\n\n    this.autoHide = true;\n    /**\n     * Specify whether component should render from right to left\n     */\n\n    this.rtl = false;\n    /**\n     * clears the timeout and sets timeoutId to undefined\n     */\n\n    this.clearTimeOut = () => {\n      window.clearTimeout(this.timeoutId);\n      this.timeoutId = undefined;\n    };\n    /**\n     * sets the timeout\n     */\n\n\n    this.setTimeOut = () => {\n      this.timeoutId = window.setTimeout(this.handleClose, this.autoHideDuration);\n    };\n\n    this.handleClose = () => {\n      this.hide = true;\n      this.showEvent.emit(false);\n    };\n\n    this.handleCtaClick = () => {\n      this.snackbarClickEvent.emit(true);\n      this.handleClose();\n    };\n\n    this.snackbarClickEvent = createEvent(this, \"cwcSnackbarClick\", 7);\n    this.showEvent = createEvent(this, \"cwcShow\", 7);\n  }\n\n  resetTimeout() {\n    this.clearTimeOut();\n  }\n\n  messageHandler(newValue, oldValue) {\n    if (oldValue !== newValue) {\n      this.messageElement.innerHTML = oldValue;\n      this.hide = true;\n      setTimeout(() => {\n        this.hide = false;\n        this.messageElement.innerHTML = newValue;\n      }, 500);\n    }\n  }\n\n  ctaMessageHandler(newValue, oldValue) {\n    if (oldValue !== newValue) {\n      this.ctaMessageElement.innerHTML = oldValue;\n      this.hide = true;\n      setTimeout(() => {\n        this.hide = false;\n        this.ctaMessageElement.innerHTML = newValue;\n      }, 500);\n    }\n  }\n  /**\n   * Prevents snackbar from closing when hover\n   */\n\n\n  handleOnMouseOver() {\n    if (this.autoHide && this.timeoutId) {\n      this.clearTimeOut();\n    }\n  }\n\n  handleMouseLeaves() {\n    if (this.autoHide) {\n      this.setTimeOut();\n    }\n  }\n  /**\n   * Shows the snackbar\n   */\n\n\n  showSnackbar() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.hide = false;\n\n      _this.showEvent.emit(true);\n    })();\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n  }\n\n  componentDidRender() {\n    if (!this.autoHide && this.timeoutId) {\n      this.clearTimeOut();\n    }\n\n    if (this.autoHide && !this.timeoutId) {\n      this.setTimeOut();\n    }\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n\n  render() {\n    return h(Host, {\n      class: `cwc-snackbar ${this.hide && 'hide'}`\n    }, h(\"p\", {\n      class: 'cwc-snackbar__message',\n      ref: el => this.messageElement = el\n    }, this.message), h(\"button\", {\n      id: \"test\",\n      class: 'cwc-snackbar__cta',\n      onClick: this.handleCtaClick,\n      ref: el => this.ctaMessageElement = el\n    }, this.ctaMessage));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"hide\": [\"resetTimeout\"],\n      \"message\": [\"messageHandler\"],\n      \"ctaMessage\": [\"ctaMessageHandler\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{position:fixed;margin:auto;z-index:1000;bottom:24px;border-radius:3px;overflow:hidden;-webkit-box-shadow:0 2px 3px rgba(0,0,0,.3);box-shadow:0 2px 3px rgba(0,0,0,.3);min-width:400px;max-width:calc(100% - 64px);color:var(--cwc-snackbar-color,var(--cwc-color-grayscale-white,#fff));font-size:.875rem;line-height:1rem;max-height:240px;-webkit-transition:max-height .5s ease-in;transition:max-height .5s ease-in;background:var(--cwc-snackbar-background-color,var(--cwc-color-grayscale-dark,#333));display:-ms-flexbox;display:flex;left:50%;-webkit-transform:translate(-50%);transform:translate(-50%)}:host(.hide){max-height:0;-webkit-transition:max-height .5s ease-out;transition:max-height .5s ease-out}.cwc-snackbar__message{-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem 1.5rem;font-size:.875rem;line-height:1rem;font-family:inherit;font-weight:500;margin:0}.cwc-snackbar__cta{-ms-flex:0 0 auto;flex:0 0 auto;padding:.5rem 1rem;cursor:pointer;background:none;border:none;color:var(--cwc-snackbar-cta-color,var(--cwc-color-links,#3fa9f5));font-size:1rem;text-transform:uppercase;font-family:inherit;font-weight:500}.cwc-snackbar__cta:hover{color:var(--cwc-snackbar-cta-hover-color,var(--cwc-color-links-light,#81d4fa))}.cwc-snackbar__cta:focus{color:var(--cwc-snackbar-cta-focus-color,var(--cwc-color-links,#3fa9f5));outline:0}:host([data-dir=rtl]) .cwc-snackbar__cta,:host([data-dir=rtl]) .cwc-snackbar__message{font-family:inherit}\\@media (max-width:767px){:host{bottom:0;width:100%;max-width:100%}}\";\n  }\n\n};\nexport { CwcSnackbar as cwc_snackbar };","map":null,"metadata":{},"sourceType":"module"}