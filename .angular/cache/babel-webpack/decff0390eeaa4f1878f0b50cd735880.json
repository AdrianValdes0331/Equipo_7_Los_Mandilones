{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\nimport { LocaleEnum } from '../enums/locale.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.store\";\nexport function createInitialState() {\n  return {\n    languages: [],\n    activeLanguage: {\n      languageISO: 'en_US'\n    }\n  };\n}\nlet LocaleStore = class LocaleStore extends EntityStore {\n  constructor(appStore) {\n    super(createInitialState());\n    this.appStore = appStore;\n  }\n  /**\r\n   * this method is called everytime a new language configuration\r\n   * is downloaded to be part of the configurations array\r\n   */\n\n\n  addLanguages(zlanguages) {\n    this.update(state => Object.assign(Object.assign({}, state), {\n      languages: state.languages.concat(zlanguages)\n    }));\n  }\n  /**\r\n   * this method sets the language configuration in active position\r\n   * @param languageISO string such as en_US or es_MX\r\n   * the param can also be the country\r\n   */\n\n\n  setActiveLanguage(languageISO) {\n    const possibleLanguages = this.getValue().languages.filter(lang => lang.languageISO.includes(`_${languageISO}`) || lang.languageISO.includes(`${languageISO}`)); // also update the correct language\n\n    if (possibleLanguages.length > 0) {\n      localStorage.setItem('language', possibleLanguages[0].languageISO);\n      this.update(state => Object.assign(Object.assign({}, state), {\n        activeLanguage: possibleLanguages[0]\n      })); // if the language is RTL notify to the application about the change\n\n      const isRTL = possibleLanguages[0].textFloat === 'right' ? LocaleEnum.LANGUAGE_RTL : LocaleEnum.LANGUAGE_LTR;\n      this.appStore.setRTL(isRTL);\n      document.dir = isRTL === LocaleEnum.LANGUAGE_RTL ? 'rtl' : 'ltr';\n    }\n  }\n\n};\n\nLocaleStore.ɵfac = function LocaleStore_Factory(t) {\n  return new (t || LocaleStore)(i0.ɵɵinject(i1.CmxAppStore));\n};\n\nLocaleStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LocaleStore,\n  factory: LocaleStore.ɵfac,\n  providedIn: 'root'\n});\nLocaleStore = __decorate([StoreConfig({\n  name: 'cxlocale'\n})], LocaleStore);\nexport { LocaleStore };","map":null,"metadata":{},"sourceType":"module"}