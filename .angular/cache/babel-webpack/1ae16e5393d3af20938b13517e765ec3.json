{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\nimport * as i0 from \"@angular/core\";\nexport function createInitialState() {\n  return {\n    legalEntities: null,\n    selectedLegalEntity: null\n  };\n}\nlet LegalEntityStore = class LegalEntityStore extends EntityStore {\n  constructor() {\n    super(createInitialState());\n  }\n  /**\r\n   * sets all the legal entities into the application state for usage in\r\n   * the application livecycle\r\n   */\n\n\n  setLegalEntities(customers) {\n    this.update(state => Object.assign(Object.assign({}, state), {\n      legalEntities: customers\n    }));\n  }\n  /**\r\n   * this method saves a copy of a legal entity to be used as working customer across the active selection\r\n   * @param customer a LegalEntity type\r\n   */\n\n\n  setActiveLegalEntity(customer) {\n    this.update(state => Object.assign(Object.assign({}, state), {\n      selectedLegalEntity: customer\n    }));\n  }\n\n};\n\nLegalEntityStore.ɵfac = function LegalEntityStore_Factory(t) {\n  return new (t || LegalEntityStore)();\n};\n\nLegalEntityStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LegalEntityStore,\n  factory: LegalEntityStore.ɵfac,\n  providedIn: 'root'\n});\nLegalEntityStore = __decorate([StoreConfig({\n  name: 'legalentity',\n  resettable: true\n})], LegalEntityStore);\nexport { LegalEntityStore };","map":null,"metadata":{},"sourceType":"module"}