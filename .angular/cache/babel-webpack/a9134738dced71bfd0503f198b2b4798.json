{"ast":null,"code":"import { r as registerInstance, h, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nconst StatusIndicator = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Type of status indicator\n     */\n\n    this.variant = 'info';\n    /**\n     * Type of status indicator\n     */\n\n    this.size = 'regular';\n    /**\n     * If status indicator is an outline or full\n     */\n\n    this.outline = false;\n    /**\n     * Specify whether component should render from right to left\n     */\n\n    this.rtl = false;\n  }\n\n  componentWillLoad() {\n    initBasics(this);\n  }\n\n  componentDidLoad() {\n    const nodes = this.host.shadowRoot.querySelector('slot').assignedNodes();\n\n    if (nodes && nodes[0] && !this.ariaLabel) {\n      this.ariaLabel = nodes[0].textContent;\n    }\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n\n  render() {\n    return h(\"div\", {\n      class: `cwc-status-indicator cwc-status-indicator--size-${this.size} ${this.designVersion}`\n    }, h(\"div\", {\n      class: 'cwc-status-indicator__flag cwc-status-indicator__flag--' + this.variant,\n      \"aria-label\": this.ariaLabel\n    }, this.outline ? h(\"div\", {\n      class: \"cwc-status-indicator__flag-outline\"\n    }) : null), h(\"span\", {\n      class: \"cwc-status-indicator__label\"\n    }, h(\"slot\", null)));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}[dir=ltr] .cwc-status-indicator{margin-right:.5rem}[dir=rtl] .cwc-status-indicator{margin-left:.5rem}.cwc-status-indicator{display:-ms-flexbox;display:flex;-webkit-margin-end:.5rem;margin-inline-end:.5rem;-ms-flex-align:start;align-items:flex-start}[dir=ltr] .cwc-status-indicator__flag{margin-right:.5rem}[dir=rtl] .cwc-status-indicator__flag{margin-left:.5rem}.cwc-status-indicator__flag{width:24px;height:16px;border-radius:2px;-webkit-margin-end:.5rem;margin-inline-end:.5rem;-ms-flex:0 0 auto;flex:0 0 auto;position:relative;top:0}.cwc-status-indicator__flag-outline{width:calc(100% - 6px);height:calc(100% - 6px);margin:3px;background-color:var(--cwc-status-indicator-flag-outline-background-color,var(--cwc-color-grayscale-white,#fff));border-radius:1px}.cwc-status-indicator__flag--alert{background:var(--cwc-status-indicator-flag-alert-background-color,var(--cwc-color-status-error,#ee3d42))}.cwc-status-indicator__flag--success{background:var(--cwc-status-indicator-flag-success-background-color,var(--cwc-color-status-success,#7ac943))}.cwc-status-indicator__flag--warning{background:var(--cwc-status-indicator-flag-warning-background-color,var(--cwc-color-status-warning,#fbb03b))}.cwc-status-indicator__flag--disabled{background:var(--cwc-status-indicator-flag-disabled-background-color,var(--cwc-color-grayscale-light,#d6d6d6))}.cwc-status-indicator__flag--info{background:var(--cwc-status-indicator-flag-info-background-color,var(--cwc-color-status-info,#3fa9f5))}.cwc-status-indicator__label{font-size:.875rem;color:var(--cwc-status-indicator-label-color,var(--cwc-color-grayscale-dark,#333))}.cwc-status-indicator--size-small .cwc-status-indicator__flag{width:14px;height:10px;top:1px}.cwc-status-indicator--size-small .cwc-status-indicator__label{font-size:.75rem}.cwc-status-indicator--size-extra-small .cwc-status-indicator__flag{width:10px;height:10px}.cwc-status-indicator--size-extra-small .cwc-status-indicator__label{font-size:.625rem}\";\n  }\n\n};\nexport { StatusIndicator as cwc_status_indicator };","map":null,"metadata":{},"sourceType":"module"}