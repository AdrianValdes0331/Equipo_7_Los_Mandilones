{"ast":null,"code":"import { r as registerInstance, c as createEvent, h } from './core-85189c77.js';\nconst Accordion = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Current state of the component\n     */\n\n    this.isExpanded = false;\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Specify if you can expand detail\n     */\n\n    this.expandable = true;\n    /**\n     * Specify if detail is visible or not\n     */\n\n    this.expanded = false;\n    /**\n     * Specify if it will render in rtl mode\n     */\n\n    this.rtl = false;\n\n    this.handleExpand = () => {\n      this.isExpanded = !this.isExpanded;\n      this.expandEvent.emit(this.isExpanded);\n    };\n\n    this.expandEvent = createEvent(this, \"cwcExpand\", 7);\n  }\n  /**\n   * Method called on checked prop change\n   */\n\n\n  updateExpandedValue(newValue) {\n    this.isExpanded = newValue;\n  }\n\n  componentWillLoad() {\n    this.isExpanded = this.expanded;\n  }\n\n  render() {\n    return h(\"div\", {\n      class: `cwc-accordion ${this.designVersion}`,\n      dir: this.rtl ? 'rtl' : 'ltr'\n    }, h(\"div\", {\n      class: 'cwc-accordion__content' + (this.expandable ? ' cwc-accordion__content--expandable' : '')\n    }, h(\"slot\", {\n      name: \"content\"\n    }), this.expandable && h(\"cwc-icon\", {\n      designVersion: this.designVersion,\n      name: this.isExpanded ? 'collapse' : 'expand',\n      onClick: this.handleExpand\n    })), this.isExpanded && h(\"div\", {\n      class: 'cwc-accordion-detail' + (this.isExpanded ? ' cwc-accordion-detail--opened' : '')\n    }, h(\"slot\", {\n      name: \"detail\"\n    })));\n  }\n\n  static get watchers() {\n    return {\n      \"expanded\": [\"updateExpandedValue\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.cwc-accordion{width:100%;position:relative;background:var(--cwc-accordion-background-color,var(--cwc-color-grayscale-white,#fff));-webkit-box-shadow:0 2px 4px 0 var(--cwc-color-grayscale-black-alpha-ten,rgba(0,0,0,.1));box-shadow:0 2px 4px 0 var(--cwc-color-grayscale-black-alpha-ten,rgba(0,0,0,.1));padding:1.25rem;-webkit-box-sizing:border-box;box-sizing:border-box;border-radius:2px;font-family:Roboto,sans-serif;font-size:.875rem;color:var(--cwc-accordion-color,var(--cwc-color-grayscale-dark,#333))}.cwc-accordion__content{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.cwc-accordion__content cwc-icon{color:var(--cwc-accordion-icon-color,var(--cwc-color-links,#3fa9f5));cursor:pointer;position:absolute;right:1.25rem;font-size:1rem}.cwc-accordion__content--expandable{padding-right:1.5rem}.cwc-accordion-detail{position:relative;margin-top:1.25rem;padding-top:1.25rem}.cwc-accordion-detail:before{content:\\\"\\\";width:calc(100% + 2.5rem);height:2px;display:block;position:absolute;top:0;left:-1.25rem;background:#f1f1f1}.cwc-accordion[dir=rtl]{font-family:inherit}.cwc-accordion[dir=rtl] .cwc-accordion__content--expandable{padding-left:1.5rem;padding-right:0}.cwc-accordion[dir=rtl] cwc-icon{right:auto;left:1.25rem}\";\n  }\n\n};\nexport { Accordion as cwc_accordion };","map":null,"metadata":{},"sourceType":"module"}