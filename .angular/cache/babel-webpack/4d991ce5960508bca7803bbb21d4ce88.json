{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pingu/Documents/Tec/Carrera Tec sem 6/parcial_2/Cemex_Materiales/Cemex_Login_V1.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './core-85189c77.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\nimport { s as setAttributes, u as uuidv4 } from './helpers-bb43a8d9.js';\nconst RESPONSIVE_BREAKPOINT_AS_MAX = 768;\nconst PickerInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.hidden = true;\n    this.orientation = 'nn';\n    this.layerStyle = {};\n    this.valueLabel = '';\n    this.pickerId = null;\n    this.highlightedOption = null;\n    this.isFocused = false;\n    this.changeByAction = false;\n    this.fromControlValue = false;\n    this.overlayCss = `\n  .cwc-picker__overlay {\n    display: block;\n    position: fixed;\n    z-index: 999;\n    background-image: linear-gradient(180deg, #3FA9F5 0%, #3FA9F5 3px, #FFF 3px, #FFF 100%);\n    border-radius: 3px;\n    -webkit-box-shadow: 0 8px 13px rgba(0, 0, 0, 0.3);\n    box-shadow: 0 8px 13px rgba(0, 0, 0, 0.3);\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    overflow: hidden;\n    opacity: 1;\n    max-height: 300px;\n    max-width: 80vw;\n    padding-top: 3px;\n    transition: opacity 300ms ease, transform 250ms ease;\n  }\n  .cwc-picker__overlay.cwc-picker--hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n  .cwc-picker__overlay.pp, .cwc-picker__overlay.np {\n    -ms-flex-item-align: end;\n    align-self: flex-end;\n    -webkit-box-shadow: 0 -8px 13px rgba(0, 0, 0, 0.3);\n    box-shadow: 0 -8px 13px rgba(0, 0, 0, 0.3);\n    background-image: linear-gradient(0deg, #3FA9F5 0%, #3FA9F5 3px, #FFF 3px, #FFF 100%);\n    padding-bottom: 3px; // set in pixels cause of the line width;\n    padding-top: 0px;\n  }\n  [dir=\"ltr\"] .cwc-picker__overlay-header::before{\n    margin-left: 1.5em;\n  }\n  [dir=\"rtl\"] .cwc-picker__overlay-header::before{\n    margin-right: 1.5em;\n  }\n  .cwc-picker__overlay-header::before {\n    content: \"\\\\E929\";\n    font-family: \"dls-icons\";\n    position: absolute;\n    line-height: 1.5rem;\n    font-size: 1rem;\n    top: 0.5rem;\n    color: #3FA9F5;\n    pointer-events: none;\n    -webkit-margin-start: 1.5em;\n            margin-inline-start: 1.5em;\n    margin-top: 2px;\n  }\n  .cwc-picker__overlay-footer {\n    padding: 0.75rem 0;\n    border-top: 1px solid #ADAEBB;\n    margin: 0 1rem;\n    display: -ms-flexbox;\n    display: flex;\n  }\n  .cwc-picker__overlay-footer--justify-start {\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .cwc-picker__overlay-footer--justify-end {\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n  }\n  .cwc-picker__overlay-filter {\n    margin: 0 1rem;\n    padding: 0;\n    padding-inline-start: 2rem;\n    font-family: \"Roboto\", sans-serif;\n    border: none;\n    border-bottom: 1px solid #ADAEBB;\n    width: calc(100% - 2rem);\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    font-size: 1rem;\n    height: 2.5rem;\n    outline: none;\n  }\n  .cwc-picker__options-scroller {\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    overflow-y: auto;\n  }\n\n  .cwc-picker__options-scroller--empty::before{\n    content:attr(data-empty-message);\n    display:block;\n    padding: 0.75rem 1rem;\n    color:#666;\n  }\n  .cwc-picker__option {\n    padding: 0.625rem 2rem;\n    cursor: pointer;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    position: relative;\n  }\n  .cwc-picker__option--highlighted {\n    background-color: #F4F6F9;\n  }\n  .cwc-picker__option[data-selected=true]::before {\n    content: \"\\\\e93c\";\n    font-family: 'dls-icons' !important;\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    margin-inline-start: -1.375rem;\n    color: #3FA9F5;\n  }\n\n  .cwc-picker__option--filtered {\n    display:none;\n  }\n\n  .cwc-picker--multiple .cwc-picker__option[data-selected=false]::before {\n    content: \"\\\\e911\";\n    font-family: 'dls-icons' !important;\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    margin-inline-start: -1.375rem;\n    color: #ADAEBB;\n  }\n\n  .cwc-picker--multiple .cwc-picker__option[data-selected=true]::before {\n    content: \"\\\\e910\";\n  }\n\n  .cwc-picker--multiple .cwc-picker__option {\n    padding: 0.625rem 3.125rem;\n  }\n\n  @media (max-width: 767px) {\n    .cwc-picker__overlay {\n      top: 0 !important;\n      left: 0 !important;\n      width: 100% !important;\n      height: 100vh !important;\n      max-height: 100vh !important;\n      max-width: 100vw !important;\n      -ms-flex-align: center;\n      align-items: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      background-color: rgba(0, 27, 58, 0.8);\n      pointer-events: none !important;\n      min-width: 0 !important;\n    }\n    .cwc-picker__overlay.cwc-picker--visible{\n      pointer-events: all !important;\n    }\n    .cwc-picker__overlay.nn, .cwc-picker__overlay.pn, .cwc-picker__overlay.pp, .cwc-picker__overlay.np {\n      background-image: none;\n    }\n    .cwc-picker__options-scroller,\n    .cwc-picker__overlay-header{\n      background-color: #fff;\n      max-height: calc(100vh - 64px);\n      width: calc(100vw - 64px);\n      display: block;\n      flex: 0 0 auto;\n      border-top: 3px solid #3FA9F5;\n      position:relative;\n    }\n    .cwc-picker__overlay-header + .cwc-picker__options-scroller {\n      border-top: none;\n    }\n    .cwc-picker__overlay-footer{\n      width: calc(100vw - 64px);\n      background-color: #fff;\n      padding: 0.75rem;\n      box-sizing: border-box;\n    }\n  }\n  `;\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /** Forces the overlay to open in a certain direction. Possible values are \"ne\", \"se\", \"sw\" and \"nw\" */\n\n    this.direction = null;\n    /** disables the overlay funcitonality */\n\n    this.disabled = false;\n    /** Defines max height in px of the select dropdown */\n\n    this.dropdownMaxHeight = null;\n    /** When set to true, dropdown will show an options filtering input */\n\n    this.filter = false;\n    /** Placeholder for options filter input */\n\n    this.filterPlaceholder = 'Filter Options';\n    /** Placeholder for options filter input */\n\n    this.filterEmptyMessage = 'No options match your query';\n    /** A CTA Button element in the footer of the select */\n\n    this.footerCta = false;\n    /** The Variant of the CTA Butoon */\n\n    this.footerCtaVariant = 'link';\n    /** The position of the CTA Button Icon */\n\n    this.footerCtaIconPosition = 'leading';\n    /** The position of the CTA Button Icon */\n\n    this.footerCtaJustify = 'start';\n    /** Input label */\n\n    this.label = null;\n    /** When set to true, loader will appear inside the select */\n\n    this.loading = false;\n    /** Defines if the options will be multiple (with checkbox) */\n\n    this.multiple = false;\n    /** Special implementation of mobile input (material design like) */\n\n    this.mobile = false;\n    /** disables overlay toggling on target element click */\n\n    this.noToggle = false;\n    /** When set to true the element is required and the label is decorated with an asterisk (*) */\n\n    this.required = false;\n    /** Specify whether component should render from right to left */\n\n    this.rtl = false;\n    /** Defines whether on multiple option should show option \"Select All\" */\n\n    this.selectAll = false;\n    /** Label for Select All option */\n\n    this.selectAllLabel = 'Select All';\n    /** Shows and hides the overlay */\n\n    this.show = false;\n    /** Status of the form field. */\n\n    this.status = 'regular';\n    /**\n     * Defines if values should be treated as strings or objects. If set to true, The output value will be the option string value instead of the { name, value } object.\n     */\n\n    this.stringValues = false;\n    /** Defines if the select has got to be rendered with out supporting chrome. */\n\n    this.unwrap = false;\n    /**\n     * Provides a means to read and replace the selections for this component. Value type is { name: string; value: string | number; } | string | number\n     */\n\n    this.value = null;\n    /** This controls the private inner working of value getting setting */\n\n    this.controlValue = null;\n    /** Specify the variant of the picker */\n\n    this.variant = 'regular'; // Apply change in both the layer and host\n\n    this.selectHighlighted = e => {\n      const clickValue = this.highlightedOption.dataset.value;\n      const pickedSelection = this.host.querySelector('option[value=\"' + clickValue + '\"]');\n      const optionSelector = this.optionsScroller.querySelector('.cwc-picker__option[data-value=\"' + clickValue + '\"]'); // let's set this flag so the change doesn't occur twice\n\n      this.changeByAction = true; // on single selection check if i selected the same value\n\n      if (!this.multiple) {\n        const currentSelection = this.host.querySelector('option[selected]');\n        const currentSelectionScroller = this.optionsScroller.querySelector('.cwc-picker__option[data-selected=\"true\"]'); // set actual option as selected\n\n        if (currentSelection !== pickedSelection) {\n          if (currentSelection) {\n            currentSelection.removeAttribute('selected');\n          }\n\n          pickedSelection.setAttribute('selected', 'selected');\n\n          if (currentSelectionScroller) {\n            currentSelectionScroller.setAttribute('data-selected', 'false');\n          }\n\n          if (optionSelector) {\n            optionSelector.setAttribute('data-selected', 'true');\n          }\n        }\n\n        this.controlValue = {\n          value: clickValue,\n          name: this.highlightedOption.dataset.name\n        };\n      } else {\n        const options = this.host.querySelectorAll('option');\n        let currentSelections = Array.from(this.host.querySelectorAll('option[selected]'));\n        const optionsScroller = this.optionsScroller.querySelectorAll('.cwc-picker__option');\n        const valueArray = []; // check if this is our select all option\n\n        if (clickValue === 'cwc-picker-select-all-option') {\n          if (options.length === currentSelections.length) {\n            // deselect all\n            options.forEach(option => {\n              option.removeAttribute('selected');\n            });\n            optionsScroller.forEach(option => {\n              option.setAttribute('data-selected', 'false');\n            }); // selectButton.setAttribute('data-selected', 'false');\n          } else {\n            // select all\n            options.forEach(option => {\n              option.setAttribute('selected', 'selected');\n              const valueObject = {\n                value: option.value,\n                name: option.innerText\n              };\n              valueArray.push(valueObject);\n            });\n            optionsScroller.forEach(option => {\n              option.setAttribute('data-selected', 'true');\n            }); // selectButton.setAttribute('data-selected', 'true');\n          }\n        } else {\n          // on multiple selection check if what i clicked is not selected and select/deselect accordingly\n          if (pickedSelection.getAttribute('selected') === 'selected') {\n            // deselect\n            pickedSelection.removeAttribute('selected');\n            currentSelections = currentSelections.filter(selection => {\n              return selection !== pickedSelection;\n            });\n\n            if (optionSelector) {\n              optionSelector.setAttribute('data-selected', 'false');\n            }\n          } else {\n            // select\n            pickedSelection.setAttribute('selected', 'selected');\n\n            if (optionSelector) {\n              optionSelector.setAttribute('data-selected', 'true');\n            }\n\n            if (currentSelections.indexOf(pickedSelection) === -1) {\n              currentSelections.push(pickedSelection);\n            }\n          }\n\n          currentSelections.forEach(selection => {\n            const valueObject = {\n              value: selection.value,\n              name: selection.innerText\n            };\n            valueArray.push(valueObject);\n          });\n        }\n\n        this.controlValue = valueArray; // check/uncheck select all if present and needed\n\n        if (this.layer && this.selectAll) {\n          const selectButton = this.layer.querySelector('div[data-value=cwc-picker-select-all-option]');\n          selectButton.setAttribute('data-selected', options.length === valueArray.length ? 'true' : 'false');\n        }\n      }\n\n      this.changeInputText();\n\n      if (!e.silent) {\n        this.emitNewValue();\n\n        if (!this.multiple && !this.noToggle) {\n          this.hideOverlay({\n            target: this.targetElement\n          });\n        }\n\n        this.targetElement.focus();\n      }\n    };\n\n    this.handleKeystrokes = e => {\n      e.preventDefault(); // get the pressed key\n\n      const key = e.code; // we let tab get used normally to advance back and forth in the tabindex\n\n      if (key !== 'Tab') {\n        // if not tab, let's prevent default behavior to act upon the keystroke\n        // get the adequate funciton for each keystroke\n        const keyFn = this.getKeystrokeFunction(key); // if there's a function\n\n        if (keyFn) {\n          // execute\n          keyFn(e);\n        } // add support for filtering keydown implementation here on else\n\n      }\n    };\n\n    this.handleBlur = () => {\n      this.isFocused = false;\n      this.cwcBlur.emit();\n      this.targetElement.classList.remove('cwc-picker__input--active');\n      const label = this.targetElement.previousSibling;\n\n      if (label) {\n        label.classList.remove('cwc-picker__label--active');\n      }\n\n      document.removeEventListener('focusin', this.hasBlured);\n      document.removeEventListener('keydown', this.handleKeystrokes);\n      document.removeEventListener('click', this.hasBlured);\n    }; // let's emulate the select's behavior of blur when clicking outside of it.\n\n\n    this.hasBlured = e => {\n      const clickedOnElement = e.target === this.host;\n      const clickedWithinLayer = this.layer.contains(e.target);\n\n      if (!clickedOnElement && !clickedWithinLayer) {\n        this.handleBlur();\n      }\n    };\n\n    this.onFocus = ev => {\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      if (!this.isFocused) {\n        this.targetElement.classList.add('cwc-picker__input--active');\n        const label = this.targetElement.previousSibling;\n\n        if (label) {\n          label.classList.add('cwc-picker__label--active');\n        }\n\n        this.isFocused = true;\n        this.cwcFocus.emit();\n        setTimeout(() => {\n          document.addEventListener('click', this.hasBlured);\n          document.addEventListener('keydown', this.handleKeystrokes);\n          document.addEventListener('focusin', this.hasBlured);\n        }, 0);\n      }\n    };\n\n    this.setOrientation = orientation => {\n      this.orientation = orientation;\n      this.layer.classList.remove('nn');\n      this.layer.classList.remove('np');\n      this.layer.classList.remove('pp');\n      this.layer.classList.remove('pn');\n      this.layer.classList.add(orientation);\n    };\n\n    this.setLayerStyle = layerStyles => {\n      const fullStyle = Object.assign({}, layerStyles);\n      Object.keys(fullStyle).forEach(style => {\n        this.layer.style[style] = fullStyle[style];\n      });\n    };\n\n    this.positionOverlay = () => {\n      // find position on screen\n      const elementDimensions = this.targetElement.getBoundingClientRect();\n\n      if (this.layer) {\n        // get overlay dimensions\n        const layerDimensions = this.layer.getBoundingClientRect(); // get window width and height\n\n        const windowDimensions = {\n          width: document.documentElement.clientWidth,\n          height: document.documentElement.clientHeight\n        }; // define base overlay style\n\n        const layerStyle = {\n          left: '',\n          top: '',\n          minWidth: elementDimensions.width + 'px'\n        };\n        let caseString;\n        let flow;\n        let lateralOverflow;\n        let verticalOverflow;\n\n        if (this.direction) {\n          flow = 'ltr';\n          const directionArray = this.direction.split('');\n          caseString = (directionArray[1] === 'w' ? 'p' : 'n') + (directionArray[0] === 'n' ? 'p' : 'n');\n        } else {\n          if (!this.rtl) {\n            // calculate if overflows\n            lateralOverflow = elementDimensions.left + layerDimensions.width - windowDimensions.width;\n            verticalOverflow = elementDimensions.top + layerDimensions.height - windowDimensions.height; // define the overflow scenario for a particular class and the positioning switch\n\n            caseString = (lateralOverflow > 0 ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n');\n            flow = 'ltr';\n          } else {\n            // calculate if overflows\n            const endOverflow = elementDimensions.right - layerDimensions.width;\n            const startOverflow = elementDimensions.left + layerDimensions.width - windowDimensions.width;\n            verticalOverflow = elementDimensions.top + layerDimensions.height - windowDimensions.height;\n            const sideOverflow = endOverflow < 0 && startOverflow < 0; // define the overflow scenario for a particular class and the positioning switch\n\n            caseString = (sideOverflow ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n');\n            flow = 'rtl';\n          }\n        } // get the top left values with the orientation string\n\n\n        const topleft = this.getOrientation(`${flow}_${caseString}`, elementDimensions, layerDimensions); // assign the new layer style\n\n        const fullStyle = Object.assign(Object.assign({}, layerStyle), topleft);\n        this.setLayerStyle(fullStyle); // assign the orientation for custom orientation classes\n\n        this.setOrientation(caseString);\n      }\n    }; // this funciton shows the overlay\n\n\n    this.showOverlay = () => {\n      this.targetElement.classList.add('open');\n      setTimeout(() => {\n        document.addEventListener('scroll', this.hideOverlay, true);\n        document.addEventListener('cwcScroll', this.hideOverlay, true);\n        window.addEventListener('resize', this.hideOverlay);\n\n        if (!this.noToggle) {\n          document.addEventListener('click', this.hideOverlay);\n        }\n      });\n      this.positionOverlay();\n      this.layerStyle = Object.assign({}, this.layerStyle);\n      this.hidden = false;\n      this.layer.classList.remove('cwc-picker--hidden');\n      this.layer.classList.add('cwc-picker--visible');\n      this.showEvent.emit(true);\n    }; // this function hides the overlay\n\n\n    this.hideOverlay = e => {\n      this.targetElement.classList.remove('open');\n      const target = e.target;\n      const iw = this.layer.contains(target);\n\n      const hideFn = () => {\n        document.removeEventListener('scroll', this.hideOverlay, true);\n        document.removeEventListener('cwcScroll', this.hideOverlay, true);\n        window.removeEventListener('resize', this.hideOverlay);\n\n        if (!this.noToggle) {\n          document.removeEventListener('click', this.hideOverlay);\n        }\n\n        this.layerStyle = Object.assign({}, this.layerStyle);\n        this.hidden = true;\n        this.layer.classList.remove('cwc-picker--visible');\n        this.layer.classList.add('cwc-picker--hidden');\n        this.showEvent.emit(false);\n      };\n\n      if (!iw) {\n        hideFn();\n      } else {\n        // let's verify if it's mobile and the backdrop has been clicked\n        const winWidth = window.innerWidth;\n\n        if (winWidth < RESPONSIVE_BREAKPOINT_AS_MAX && e.target === this.layer) {\n          hideFn();\n        }\n      }\n    }; // this function toggles the overlay state\n\n\n    this.toggleOverlay = e => {\n      if (!this.disabled && !this.noToggle) {\n        if (this.hidden) {\n          return this.showOverlay();\n        }\n\n        return this.hideOverlay(e);\n      }\n    };\n\n    this.highlightOptionByEvent = e => {\n      const highlightedOption = this.layer.querySelector('.cwc-picker__option--highlighted');\n\n      if (highlightedOption) {\n        highlightedOption.classList.remove('cwc-picker__option--highlighted');\n      }\n\n      const target = e.target;\n      target.classList.add('cwc-picker__option--highlighted');\n      this.highlightedOption = target;\n    };\n\n    this.filterOptions = fString => {\n      this.emitFilterValue(fString);\n      const layerOptions = this.layer.querySelectorAll('.cwc-picker__option');\n      let optionAvailable = false;\n      layerOptions.forEach(option => {\n        const optionLabel = option.dataset.name.toLowerCase();\n        const filter = fString.toLowerCase();\n        const match = optionLabel.indexOf(filter) > -1 ? true : false; // determine if there's a match to show empty message or not\n\n        if (!optionAvailable && match) {\n          optionAvailable = true;\n        }\n\n        if (fString) {\n          // add or remove filter class\n          option.classList[match ? 'remove' : 'add']('cwc-picker__option--filtered');\n        } else {\n          option.classList.remove('cwc-picker__option--filtered');\n        }\n      }); // let's see if there's an option available and tell the user if not\n\n      const optionScroller = this.layer.querySelector('.cwc-picker__options-scroller');\n\n      if (!optionAvailable) {\n        optionScroller.classList.add('cwc-picker__options-scroller--empty');\n      } else {\n        optionScroller.classList.remove('cwc-picker__options-scroller--empty');\n      }\n    };\n\n    this.createSelectAllCta = () => {\n      const modelOption = document.createElement('option');\n      modelOption.setAttribute('value', 'cwc-picker-select-all-option');\n      modelOption.innerText = this.selectAllLabel;\n      const selectAllCta = this.createOption(modelOption);\n      return selectAllCta;\n    };\n\n    this.removeSelectionByValue = optionValue => {\n      if (this.multiple) {\n        const newValue = [].concat(this.controlValue);\n        this.controlValue = newValue.filter(selection => {\n          return selection.value !== optionValue;\n        });\n      } else {\n        this.controlValue = null;\n      }\n\n      this.changeInputText();\n    };\n\n    this.mutationHandler = mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList') {\n          // get added nodes\n          mutation.addedNodes.forEach(node => {\n            if (node.nodeType === 1 && node.nodeName === 'OPTION') {\n              const option = this.createOption(node);\n              this.optionsScroller.appendChild(option);\n            }\n          }); // get removals\n\n          mutation.removedNodes.forEach(node => {\n            if (node.nodeType === 1 && node.nodeName === 'OPTION') {\n              const optionValue = node.getAttribute('value');\n              this.removeOptionByValue(optionValue);\n            }\n          });\n        } // change attribute of the option\n\n\n        if (mutation.type === 'attributes') {\n          const attributeName = mutation.attributeName;\n          const oldValue = mutation.oldValue;\n          const newValue = mutation.target.getAttribute(attributeName);\n          const optionValue = attributeName === 'value' ? oldValue : mutation.target.getAttribute('value');\n\n          if (mutation.target.nodeName !== 'CWC-PICKER') {\n            this.changeOptionAttributeByValue(optionValue, attributeName, oldValue, newValue);\n          }\n        } // change text within an option\n\n\n        if (mutation.type === 'characterData') {\n          const option = mutation.target.parentNode;\n          const optionValue = option.getAttribute('value');\n          this.changeOptionTextByValue(optionValue, mutation.target.textContent);\n        }\n      });\n    };\n\n    this.cwcBlur = createEvent(this, \"cwcBlur\", 7);\n    this.cwcChange = createEvent(this, \"cwcChange\", 7);\n    this.cwcFilter = createEvent(this, \"cwcFilter\", 7);\n    this.cwcPickerCtaClick = createEvent(this, \"cwcPickerCtaClick\", 7);\n    this.cwcFocus = createEvent(this, \"cwcFocus\", 7);\n    this.showEvent = createEvent(this, \"cwcShow\", 7);\n  }\n\n  updateMultiple(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      if (newValue === true) {\n        // convert single to multiple\n        if (this.controlValue) {\n          const zeValue = [];\n          zeValue.push(this.controlValue);\n          this.controlValue = zeValue;\n        }\n      } else {\n        // convert multiple to single\n        if (Array.of(this.controlValue).length > 0) {\n          this.controlValue = this.controlValue[0];\n        }\n\n        const selectedOptions = this.host.querySelectorAll('option[selected]');\n\n        if (selectedOptions.length > 1) {\n          for (let i = 1; i < selectedOptions.length; i++) {\n            selectedOptions[i].removeAttribute('selected');\n          }\n        }\n      } // reinitialize layer\n\n\n      this.componentDidUnload();\n      this.componentDidLoad(); // emit new value as it changed for sure\n\n      this.emitNewValue();\n    }\n  }\n\n  updateDir(isRtl) {\n    this.layer.setAttribute('dir', isRtl ? 'rtl' : 'ltr');\n    this.positionOverlay();\n  }\n\n  handleShow(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      if (this.show) {\n        this.showOverlay();\n      } else {\n        this.hideOverlay({\n          target: this.targetElement,\n\n          composedPath() {\n            return false;\n          }\n\n        });\n      }\n    }\n  }\n\n  updateStringValues() {\n    this.updateValueFromControlValue();\n  }\n\n  handleValue(newValue) {\n    if (!this.fromControlValue) {\n      if (this.isCwcPickerOption(newValue)) {\n        // should be a CwcPickerOption\n        this.controlValue = newValue;\n      } else {\n        // can be CwcPickerOptions, string, number, or array of either\n        if (Array.isArray(newValue)) {\n          // either CwcPickerOptions or an array of string|number\n          if (newValue.length > 0) {\n            if (this.isCwcPickerOptions(newValue)) {\n              // array of CwcPickerOption\n              this.controlValue = newValue;\n            } else {\n              // array of string|number\n              const theArray = [];\n              newValue.forEach(value => {\n                const layerOption = this.layer.querySelector('[data-value=\"' + value + '\"]');\n\n                if (layerOption) {\n                  theArray.push({\n                    value,\n                    name: layerOption.innerText\n                  });\n                }\n              });\n              this.controlValue = theArray;\n            }\n          }\n        } else {\n          // should be string|number\n          // get the option element (if exists)\n          const layerOption = this.layer.querySelector('[data-value=\"' + newValue + '\"]');\n\n          if (layerOption) {\n            this.controlValue = {\n              value: newValue,\n              name: layerOption.innerText\n            };\n          }\n        }\n      }\n    }\n\n    this.fromControlValue = false;\n  }\n\n  setValueByProp(newValue, oldValue) {\n    // WE USE THIS METHOD ONLY FOR WHEN THE VALUE HAS BEEN SET PROGRAMATICALLY FROM OUTSIDE THE COMPONENT\n    // BY CHANGING THE VALUE PROPERTY\n    // THE REGULAR METHOD TO SET VALUE BY CLICKING OPTIONS IS IN THE METHOD \"selectHighlighted\"\n    if (this.changeByAction) {\n      this.changeByAction = false;\n      this.updateValueFromControlValue();\n      return;\n    }\n\n    const areEqualShallow = (a, b) => {\n      try {\n        for (const key in a) {\n          if (!(key in b) || a[key] !== b[key]) {\n            return false;\n          }\n        }\n\n        for (const key in b) {\n          if (!(key in a) || a[key] !== b[key]) {\n            return false;\n          }\n        }\n\n        return true;\n      } catch (error) {\n        return false;\n      }\n    };\n\n    let valuesEqual = false;\n\n    if (!this.multiple) {\n      valuesEqual = areEqualShallow(newValue, oldValue);\n    }\n\n    if (!valuesEqual) {\n      // if the new value is null then deselect everything\n      if (!newValue) {\n        // deselect everything\n        this.deselectEveryting();\n        this.emitNewValue();\n        return;\n      } // a funciton to check the validity of a value set programatically\n\n\n      const valueIsValid = dataValue => {\n        // get the option element (if exists)\n        const layerOption = this.layer.querySelector('[data-value=\"' + dataValue + '\"]');\n\n        if (layerOption) {\n          return layerOption;\n        }\n\n        const option = this.host.querySelector('option[data-value=\"' + dataValue + '\"]');\n\n        if (option) {\n          return option;\n        }\n\n        return false;\n      }; // a funciton to highlight and select a value\n\n\n      const highlightAndSelect = layerOption => {\n        if (layerOption) {\n          this.highlightedOption = layerOption;\n          this.selectHighlighted({\n            silent: true\n          });\n        }\n      };\n\n      if (this.multiple) {\n        // check if it is an array\n        if (Array.isArray(newValue)) {\n          const defNewValueArray = [];\n          newValue.forEach(option => {\n            if (option.name && option.value) {\n              // lets see if the option is valid and get the layer element\n              const valueAcceptedOption = valueIsValid(option.value);\n\n              if (!valueAcceptedOption) {\n                throw new Error('option with value ' + option.value + 'is not part of the picker options');\n              } else {\n                // it is valid, so let's push it to an array\n                defNewValueArray.push(valueAcceptedOption);\n              }\n            }\n          }); // since it is programatically, deselect everything\n\n          this.deselectEveryting(); // go through the array and select the options programatically\n\n          defNewValueArray.forEach(option => {\n            highlightAndSelect(option);\n          });\n        }\n      } else {\n        if (newValue.name && newValue.value) {\n          // lets see if the option is valid and get the layer element\n          const valueAcceptedOption = valueIsValid(newValue.value);\n\n          if (!valueAcceptedOption) {\n            this.controlValue = oldValue;\n            throw new Error('value is not part of the picker options');\n          } else {\n            // if it's valid then select the option programatically\n            highlightAndSelect(valueAcceptedOption);\n          }\n        }\n      } // emit the new value;\n\n\n      this.emitNewValue();\n    }\n\n    this.updateValueFromControlValue();\n  }\n  /** Reset picker value */\n\n\n  reset() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.controlValue = null;\n    })();\n  }\n\n  updateValueFromControlValue() {\n    const value = this.controlValue;\n    this.fromControlValue = true;\n    this.value = this.stringValues ? Array.isArray(value) ? value.map(item => item.value) : value.value : value;\n  }\n\n  isCwcPickerOption(value) {\n    return typeof value === 'object' && value.name && value.value;\n  }\n\n  isCwcPickerOptions(value) {\n    return Array.isArray(value) && value.length > 0 && value.every(option => {\n      return this.isCwcPickerOption(option);\n    });\n  }\n\n  deselectEveryting() {\n    const currentSelections = this.host.querySelectorAll('option[selected]');\n    currentSelections.forEach(option => {\n      option.removeAttribute('selected');\n    });\n    this.changeInputText();\n  }\n\n  navigateList(downWards = true) {\n    // get highlighted element\n    const highlightedOption = this.layer.querySelector('.cwc-picker__option.cwc-picker__option--highlighted');\n    let nextItem = null;\n\n    if (highlightedOption) {\n      // determine if it's the first or last\n      const possibleNextItem = downWards ? highlightedOption.nextElementSibling : highlightedOption.previousElementSibling;\n      nextItem = possibleNextItem ? possibleNextItem : highlightedOption;\n      highlightedOption.classList.remove('cwc-picker__option--highlighted');\n    } else {\n      nextItem = this.layer.querySelector('.cwc-picker__option');\n    }\n\n    nextItem.classList.add('cwc-picker__option--highlighted'); // we scroll the option into view if it's not.\n\n    nextItem.scrollIntoView(false);\n    this.highlightedOption = nextItem;\n  }\n\n  emitNewValue() {\n    this.cwcChange.emit(this.value);\n  }\n\n  emitFilterValue(filterValue) {\n    this.cwcFilter.emit(filterValue);\n  }\n\n  changeInputText() {\n    let valueLabel = '';\n\n    if (Array.isArray(this.controlValue)) {\n      // multiple values\n      this.controlValue.forEach((item, i) => {\n        const cvLength = this.controlValue['length']; // console.log(i, this.controlValue, cvLength);\n\n        const isNotLastElement = i < cvLength - 1;\n        valueLabel += item.name + (isNotLastElement ? ', ' : ' ');\n      });\n    } else {\n      // single value\n      if (this.controlValue) {\n        valueLabel = this.controlValue.name;\n      }\n    }\n\n    this.valueLabel = valueLabel;\n  }\n\n  getKeystrokeFunction(key) {\n    const keys = new Map();\n    keys.set('ArrowDown', () => {\n      if (!this.disabled) {\n        const showDropdown = this.layer.classList.contains('cwc-picker--visible');\n\n        if (!showDropdown && !this.noToggle) {\n          this.showOverlay();\n        }\n\n        this.navigateList(true);\n      }\n    });\n    keys.set('ArrowUp', () => {\n      if (!this.disabled) {\n        this.navigateList(false);\n      }\n    });\n    keys.set('Escape', e => {\n      if (!this.disabled && !this.noToggle) {\n        this.hideOverlay(e);\n      }\n    });\n    keys.set('Space', e => {\n      if (!this.disabled) {\n        const showDropdown = this.layer.classList.contains('cwc-picker--visible');\n\n        if (!showDropdown && !this.noToggle) {\n          this.showOverlay();\n        } else {\n          this.selectHighlighted(e);\n        }\n      }\n    });\n    keys.set('Enter', e => {\n      if (!this.disabled) {\n        const showDropdown = this.layer.classList.contains('cwc-picker--visible');\n\n        if (!showDropdown && !this.noToggle) {\n          this.showOverlay();\n        } else {\n          this.selectHighlighted(e);\n        }\n      }\n    });\n    return keys.get(key);\n  }\n\n  getOrientation(key, elementDimensions, layerDimensions) {\n    const formulas = new Map();\n    formulas.set('ltr_pn', {\n      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',\n      top: elementDimensions.top + elementDimensions.height + 'px'\n    });\n    formulas.set('ltr_np', {\n      left: elementDimensions.left + 'px',\n      top: elementDimensions.top - layerDimensions.height + 'px'\n    });\n    formulas.set('ltr_pp', {\n      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',\n      top: elementDimensions.top - layerDimensions.height + 'px'\n    });\n    formulas.set('ltr_nn', {\n      left: elementDimensions.left + 'px',\n      top: elementDimensions.top + elementDimensions.height + 'px'\n    });\n    formulas.set('rtl_pn', {\n      left: elementDimensions.left + 'px',\n      top: elementDimensions.top + elementDimensions.height + 'px'\n    });\n    formulas.set('rtl_np', {\n      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',\n      top: elementDimensions.top - layerDimensions.height + 'px'\n    });\n    formulas.set('rtl_pp', {\n      left: elementDimensions.left + 'px',\n      top: elementDimensions.top - layerDimensions.height + 'px'\n    });\n    formulas.set('rtl_nn', {\n      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',\n      top: elementDimensions.top + elementDimensions.height + 'px'\n    });\n    return formulas.get(key);\n  }\n\n  removeOrphanedLayer() {\n    const orphanedLayer = document.querySelector('#' + this.pickerId);\n\n    if (orphanedLayer) {\n      orphanedLayer.parentNode.removeChild(orphanedLayer);\n    }\n  }\n\n  createOverlayLayer() {\n    const destination = document.createElement('div');\n    destination.setAttribute('id', this.pickerId); // store layer ref for later manipulation\n    // get the rtl property\n\n    const dir = window.getComputedStyle(this.host, null).getPropertyValue('direction'); // set layer attributes\n\n    setAttributes(destination, {\n      role: 'dialog',\n      'aria-label': this.ariaLabel,\n      'aria-modal': 'true',\n      dir,\n      class: `cwc-picker ${this.designVersion} cwc-picker--${this.multiple ? 'multiple' : 'single'} cwc-picker__overlay ${this.hidden ? 'cwc-picker--hidden' : 'cwc-picker--visible'} ${this.orientation}`\n    });\n\n    if (this.dropdownMaxHeight) {\n      destination.style.maxHeight = this.dropdownMaxHeight + 'px';\n    }\n\n    return destination;\n  }\n\n  createOptionsFilter() {\n    const olHeader = document.createElement('div');\n    olHeader.classList.add('cwc-picker__overlay-header');\n    const olFilter = document.createElement('input');\n    setAttributes(olFilter, {\n      class: 'cwc-picker__overlay-filter',\n      placeholder: this.filterPlaceholder,\n      'aria-label': this.filterPlaceholder,\n      type: 'text',\n      autocomplete: 'off',\n      autocorrect: 'off',\n      tabindex: '-1'\n    });\n    olFilter.addEventListener('focusin', () => {\n      document.removeEventListener('keydown', this.handleKeystrokes);\n    });\n    olFilter.addEventListener('focusout', () => {\n      document.addEventListener('keydown', this.handleKeystrokes);\n    });\n    olFilter.addEventListener('input', e => {\n      // filter the options here\n      this.filterOptions(e.target.value);\n    });\n    olHeader.appendChild(olFilter);\n    return olHeader;\n  }\n\n  createOptionsScroller() {\n    // create the options for the overlay\n    const optionsScroller = document.createElement('div');\n    optionsScroller.classList.add('cwc-picker__options-scroller');\n    optionsScroller.setAttribute('data-empty-message', this.filterEmptyMessage); // add select all option if needed\n\n    if (this.multiple && this.selectAll) {\n      const selectAllCta = this.createSelectAllCta();\n      optionsScroller.appendChild(selectAllCta);\n    }\n\n    this.optionsScroller = optionsScroller;\n    return optionsScroller;\n  }\n\n  createFooterCta() {\n    const footer = document.createElement('footer');\n    setAttributes(footer, {\n      class: 'cwc-picker__overlay-footer cwc-picker__overlay-footer--justify-' + this.footerCtaJustify\n    });\n    const footerCta = document.createElement('cwc-button');\n    const buttonAttributes = {\n      variant: this.footerCtaVariant\n    };\n\n    if (this.footerCtaIcon) {\n      buttonAttributes[this.footerCtaIconPosition + '-icon'] = this.footerCtaIcon;\n    }\n\n    footerCta.innerText = this.footerCtaLabel;\n    setAttributes(footerCta, buttonAttributes);\n    footerCta.addEventListener('cwcClick', () => {\n      this.cwcPickerCtaClick.emit();\n    });\n    footer.appendChild(footerCta);\n    return footer;\n  }\n\n  setUpOverlay() {\n    // we are creating the overlay the old DOM manipulation way to be able to render it as the last element\n    // of the page, so that we can position it over any element of the DOM\n    const destination = this.createOverlayLayer(); // filter\n\n    if (this.filter) {\n      const olHeader = this.createOptionsFilter();\n      destination.appendChild(olHeader);\n    } // optionScroller\n\n\n    const optionsScroller = this.createOptionsScroller();\n    destination.appendChild(optionsScroller); // sync options\n\n    this.createOptions();\n\n    if (this.footerCta) {\n      const footerCta = this.createFooterCta();\n      destination.appendChild(footerCta);\n    }\n\n    return destination;\n  }\n\n  createOverlayStyles() {\n    // check if it's already there\n    let stylesElement = document.querySelector('#cwcPickerOverlayStyles');\n\n    if (!stylesElement) {\n      stylesElement = document.createElement('style');\n      setAttributes(stylesElement, {\n        type: 'text/css',\n        id: 'cwcPickerOverlayStyles'\n      });\n      stylesElement.appendChild(document.createTextNode(this.overlayCss));\n      document.querySelector('head').appendChild(stylesElement);\n    }\n  }\n\n  createOption(option) {\n    const optionValue = option.getAttribute('value');\n    const attributeSelected = option.getAttribute('selected');\n    let optionSelected = false; // check if it's selected or if it's in the controlValue\n\n    if (attributeSelected !== null && attributeSelected !== 'false' && attributeSelected !== undefined || this.isSelectedValue(optionValue)) {\n      optionSelected = true;\n    } // const optionSelected = attributeSelected ? (attributeSelected !== 'false' ? true : false) : false;\n\n\n    const optionElement = document.createElement('div');\n    optionElement.addEventListener('mouseenter', this.highlightOptionByEvent);\n    optionElement.addEventListener('click', this.selectHighlighted);\n    setAttributes(optionElement, {\n      class: 'cwc-picker__option',\n      'data-name': option.innerText,\n      'data-value': optionValue,\n      'data-selected': '' + optionSelected\n    });\n    optionElement.innerText = option.innerText;\n\n    if (optionSelected) {\n      this.highlightedOption = optionElement;\n      this.selectHighlighted({\n        silent: true\n      });\n    }\n\n    return optionElement;\n  }\n  /**\n   * Verifies if the variable is in the input value\n   * @param value the value to be checked\n   * @returns true if the value is in the input value\n   */\n\n\n  isSelectedValue(value) {\n    if (this.multiple && Array.isArray(this.value)) {\n      return this.value.some(selection => {\n        return selection.value === value;\n      });\n    } else {\n      return this.value === value;\n    }\n  }\n\n  removeOptionByValue(optionValue) {\n    const layerOption = this.optionsScroller.querySelector('[data-value=\"' + optionValue + '\"]');\n    const layerDiv = layerOption;\n    const optionSelected = layerDiv.dataset.selected === 'true';\n\n    if (optionSelected) {\n      this.removeSelectionByValue(optionValue);\n    }\n\n    this.optionsScroller.removeChild(layerOption);\n  }\n\n  changeOptionAttributeByValue(optionValue, attr, oldValue, newValue) {\n    if (optionValue) {\n      if (attr === 'selected') {\n        newValue = newValue !== null ? true : false;\n      }\n\n      const query = '[data-value=\"' + optionValue + '\"]';\n      const layerOption = this.optionsScroller.querySelector(query);\n\n      if (layerOption) {\n        layerOption.removeAttribute('data-' + attr);\n        layerOption.setAttribute('data-' + attr, newValue);\n      }\n    }\n  }\n\n  changeOptionTextByValue(optionValue, text) {\n    if (optionValue && text) {\n      const layerOption = this.optionsScroller.querySelector('[data-value=\"' + optionValue + '\"]');\n\n      if (layerOption) {\n        layerOption.innerText = text;\n      }\n    }\n  }\n\n  createOptions() {\n    // query the options within the select\n    const selectOptions = this.host.querySelectorAll('option');\n    selectOptions.forEach(option => {\n      const optionElement = this.createOption(option); // Update the option with values of the new element created\n\n      option.dataset.selected = optionElement.dataset.selected;\n      option.dataset.name = optionElement.dataset.name;\n      this.optionsScroller.appendChild(optionElement);\n    }); // Update controlValue with the init values\n\n    this.initValuesControl();\n  }\n  /**\n   * Updates the control value with the options selected\n   */\n\n\n  initValuesControl() {\n    this.changeByAction = true;\n\n    if (this.multiple) {\n      if (!this.controlValue || Array.isArray(this.controlValue) && !this.controlValue.length) {\n        const list = [];\n        this.optionsScroller.querySelectorAll('.cwc-picker__option[data-selected=\"true\"]').forEach(option => {\n          list.push({\n            value: option.dataset.value,\n            name: option.innerText\n          });\n        });\n        this.controlValue = list;\n      }\n    } else {\n      const selectedOption = this.optionsScroller.querySelector('.cwc-picker__option[data-selected=\"true\"]');\n\n      if (selectedOption) {\n        this.controlValue = {\n          value: selectedOption.dataset.value,\n          name: selectedOption.innerText\n        };\n      }\n    }\n  }\n  /**\n   * Listen reset event from the body to reset the picker\n   */\n\n\n  onReset(event) {\n    const target = event.target;\n\n    if (target.contains(this.host)) {\n      this.changeByAction = false;\n      this.controlValue = null;\n    }\n  }\n\n  componentWillLoad() {\n    if (!this.pickerId) {\n      this.pickerId = 'cwcPicker_' + uuidv4();\n    }\n\n    initBasics(this);\n  }\n\n  disconnectedCallback() {\n    destroyBasics(this);\n  }\n\n  componentDidLoad() {\n    // append DOM layer styles\n    this.createOverlayStyles(); // check for an orphaned layer in DOM;\n\n    this.removeOrphanedLayer();\n    const theOverlay = this.setUpOverlay();\n    this.layer = theOverlay; // append it to the body\n\n    document.querySelector('body').appendChild(theOverlay); // if has got to be shown by default, then show it here\n\n    if (this.show) {\n      this.showOverlay();\n    } // anddd an event listener for when the options change\n\n\n    setTimeout(() => {\n      // HERE WE ADD A MUTATION OBSERVER TO LITEN FOR NEW ACCORDIONS\n      // SO THAT WHEN ONE IS DYNAMICALLY ADDED, IT WILL BE INITIALIZED\n      // Options for the observer (which mutations to observe)\n      const observerConfig = {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: ['value', 'selected'],\n        childList: true,\n        subtree: true,\n        characterData: true\n      }; // Create an observer instance linked to the callback function\n\n      this.optionMutations = new MutationObserver(this.mutationHandler); // Start observing the target node for configured mutations\n\n      this.optionMutations.observe(this.host, observerConfig);\n    }, 0); // set value if declared\n\n    this.controlValue && this.setValueByProp(this.controlValue, null);\n  }\n\n  componentDidUnload() {\n    if (this.layer) {\n      this.layer.parentNode.removeChild(this.layer);\n    }\n\n    document.removeEventListener('focusin', this.hasBlured);\n    document.removeEventListener('click', this.hasBlured);\n  }\n\n  render() {\n    return h(Host, {\n      tabindex: \"0\",\n      role: \"button\",\n      onFocus: this.onFocus,\n      onClick: this.toggleOverlay,\n      class: `${this.designVersion} ${this.disabled && 'cwc-picker--disabled'}`\n    }, h(\"div\", {\n      class: 'cwc-picker__target ' + (this.unwrap ? 'cwc-picker--unwrap' : '') + ' cwc-picker--' + (this.variant === 'header' || this.variant === 'no-border' ? 'header-noborder' : 'regular') + ' cwc-picker--' + this.status + (this.mobile ? ' cwc-picker--mobile' : ''),\n      role: \"listbox\"\n    }, this.designVersion !== 'v1' && (this.variant === 'header' || this.variant === 'no-border') ? null : h(\"label\", {\n      class: 'cwc-picker__label' + (this.valueLabel === '' && this.mobile ? ' cwc-picker__label--placeholder' : '')\n    }, this.label, \" \", this.required ? h(\"span\", {\n      class: \"required\"\n    }, \" *\") : null), h(\"div\", {\n      class: 'cwc-picker__input' + (this.disabled ? ' cwc-picker__input--disabled' : '') + (this.statusMessage && this.unwrap ? ' cwc-picker__input--extra-margin' : ''),\n      ref: el => this.targetElement = el\n    }, h(\"span\", {\n      class: 'cwc-picker__input-output ' + (this.valueLabel !== '' ? '' : 'placeholder')\n    }, this.valueLabel !== '' ? this.valueLabel : this.mobile ? '' : this.placeholder), this.loading ? h(\"div\", {\n      class: \"cwc-picker__loader\"\n    }, h(\"cwc-loader\", {\n      size: \"small\"\n    })) : null), this.statusMessage ? h(\"div\", {\n      class: \"cwc-picker__status-message\"\n    }, this.statusMessage) : null), h(\"slot\", null));\n  }\n\n  componentDidRender() {\n    this.positionOverlay();\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"multiple\": [\"updateMultiple\"],\n      \"rtl\": [\"updateDir\"],\n      \"show\": [\"handleShow\"],\n      \"stringValues\": [\"updateStringValues\"],\n      \"value\": [\"handleValue\"],\n      \"controlValue\": [\"setValueByProp\"]\n    };\n  }\n\n  static get style() {\n    return \"\\@charset \\\"UTF-8\\\";*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host(.v2) .cwc-picker__input{border-radius:8px}[dir=ltr] :host(.v2) .cwc-picker__label{left:.75rem}[dir=rtl] :host(.v2) .cwc-picker__label{right:.75rem}:host(.v2) .cwc-picker__label{color:var(--cwc-picker-label-color,var(--cwc-color-ui-primary-darkest,#001b3a));top:14px;z-index:1;inset-inline-start:.75rem;background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));padding:0 .25rem;-webkit-transition:all .15s ease;transition:all .15s ease}:host(.v2) .cwc-picker--error .cwc-picker__label{color:var(--cwc-picker-label-error-color,var(--cwc-color-status-error,#ee3d42));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-error-washed-five,#f9f0f0) 0,var(--cwc-color-status-error-washed-five,#f9f0f0))}:host(.v2) .cwc-picker--warning .cwc-picker__label{color:var(--cwc-picker-label-warning-color,var(--cwc-color-status-warning,#fbb03b));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-warning-washed-five,#faf6f0) 0,var(--cwc-color-status-warning-washed-five,#faf6f0))}:host(.v2) .cwc-picker--success .cwc-picker__label{color:var(--cwc-picker-label-success-color,var(--cwc-color-status-success,#7ac943));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-success-washed-five,#f3f7f0) 0,var(--cwc-color-status-success-washed-five,#f3f7f0))}:host(.v2) .cwc-picker--mobile .cwc-picker__label--placeholder{top:35px}:host(.cwc-picker--disabled.v2) .cwc-picker__label:not(.cwc-picker__label--placeholder){color:var(--cwc-picker-label-disabled-color,var(--cwc-color-grayscale-medium,#666));background:-webkit-gradient(linear,left bottom,left top,from(var(--cwc-color-grayscale-light,#d6d6d6)),color-stop(40%,var(--cwc-color-grayscale-white,#fff)),color-stop(60%,var(--cwc-color-grayscale-white,#fff)),to(hsla(0,0%,100%,0)));background:linear-gradient(0deg,var(--cwc-color-grayscale-light,#d6d6d6),var(--cwc-color-grayscale-white,#fff) 40%,var(--cwc-color-grayscale-white,#fff) 60%,hsla(0,0%,100%,0))}:host(.cwc-picker--disabled.v2) .cwc-picker--mobile .cwc-picker__label--placeholder{background:var(--cwc-picker-placeholder-disabled-background,var(--cwc-color-grayscale-light,#d6d6d6))}:host{display:inline-block;outline:none}:host(.cwc-picker--disabled){pointer-events:none}:host(.cwc-picker--disabled) .cwc-picker--mobile .cwc-picker__label:not(.cwc-picker__label--placeholder){color:var(--cwc-picker-mobile-label-color,var(--cwc-color-grayscale-medium,#666));background:-webkit-gradient(linear,left bottom,left top,from(var(--cwc-color-grayscale-light,#d6d6d6)),color-stop(40%,var(--cwc-color-grayscale-white,#fff)),color-stop(60%,var(--cwc-color-grayscale-white,#fff)),to(hsla(0,0%,100%,0)));background:linear-gradient(0deg,var(--cwc-color-grayscale-light,#d6d6d6),var(--cwc-color-grayscale-white,#fff) 40%,var(--cwc-color-grayscale-white,#fff) 60%,hsla(0,0%,100%,0))}::slotted(*){display:none}.cwc-picker__target{display:block;pointer-events:none;position:relative;padding-bottom:1.25rem;padding-top:1.25rem}.cwc-picker__target.cwc-picker--disabled{cursor:not-allowed;pointer-events:none!important}.cwc-picker__target.cwc-picker--unwrap{padding:0}.cwc-picker__label{display:block;font-size:.75rem;line-height:.75rem;color:var(--cwc-picker-label-color,var(--cwc-color-ui-primary-darkest,#001b3a));padding:0 0 .5rem 0;margin:0;pointer-events:none;position:absolute;top:0}.cwc-picker__label .required{color:var(--cwc-picker-label-required-color,var(--cwc-color-status-error,#ee3d42))}[dir=ltr] .cwc-picker__input{padding-right:2.25rem}[dir=rtl] .cwc-picker__input{padding-left:2.25rem}.cwc-picker__input{font-size:1rem;line-height:1rem;border-radius:3px;height:2.5rem;padding:0 1rem;-webkit-padding-end:2.25rem;padding-inline-end:2.25rem;border:.0625rem solid var(--cwc-picker-input-border-color,var(--cwc-color-elements-input-border,#adaebb));background-color:var(--cwc-picker-input-background-color,var(--cwc-color-grayscale-white,#fff));font-family:inherit;-webkit-box-sizing:border-box;box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;cursor:pointer;position:relative;pointer-events:all;outline:none}.cwc-picker__input--active{border-color:var(--cwc-picker-input-active-border-color,var(--cwc-color-links,#3fa9f5))}[dir=ltr] .cwc-picker__input:after{right:.75rem}[dir=rtl] .cwc-picker__input:after{left:.75rem}.cwc-picker__input:after{content:\\\"\\\";font-family:dls-icons;color:var(--cwc-picker-input-icon-color,var(--cwc-color-links,#3fa9f5));position:absolute;inset-inline-end:.75rem;-webkit-transition:-webkit-transform .15s ease;transition:-webkit-transform .15s ease;transition:transform .15s ease;transition:transform .15s ease,-webkit-transform .15s ease}.cwc-picker__input.open:after{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.cwc-picker__input-output{display:block;width:100%;max-width:500px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.cwc-picker__input-output.placeholder{color:var(--cwc-picker-input-output-placeholder-color,var(--cwc-color-grayscale-medium,#666));font-size:1rem}.cwc-picker__input--disabled{background-color:var(--cwc-picker-input-disabled-background-color,var(--cwc-color-grayscale-light,#d6d6d6))!important;border-color:var(--cwc-picker-input-disabled-border-color,var(--cwc-color-elements-input-border,#adaebb))!important;color:var(--cwc-picker-input-disabled-color,var(--cwc-color-grayscale-medium,#666));pointer-events:none}.cwc-picker__input--disabled:after{color:var(--cwc-picker-input-icon-disabled-color,var(--cwc-color-elements-input-border,#adaebb))}.cwc-picker__input--extra-margin{margin-bottom:1rem}.cwc-picker__loader{height:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.cwc-picker__loader cwc-loader{height:1.5rem!important}[dir=ltr] .cwc-picker__status-message{left:0}[dir=rtl] .cwc-picker__status-message{right:0}.cwc-picker__status-message{font-size:.75rem;width:100%;display:inline-block;position:absolute;inset-inline-start:0;bottom:.125em}.cwc-picker--error .cwc-picker__input{border-color:var(--cwc-picker-input-error-border-color,var(--cwc-color-status-error,#ee3d42));background-color:var(--cwc-picker-input-error-background-color,var(--cwc-color-status-error-alpha-five,rgba(238,61,66,.05)))}.cwc-picker--error .cwc-picker__input:after{color:var(--cwc-picker-input-icon-error-color,var(--cwc-color-status-error,#ee3d42))}.cwc-picker--error .cwc-picker__status-message{color:var(--cwc-picker-status-message-error-color,var(--cwc-color-status-error,#ee3d42))}.cwc-picker--warning .cwc-picker__input{border-color:var(--cwc-picker-input-warning-border-color,var(--cwc-color-status-warning,#fbb03b));background-color:var(--cwc-picker-input-warning-background-color,var(--cwc-color-status-warning-alpha-five,rgba(251,176,59,.05)))}.cwc-picker--warning .cwc-picker__input:after{color:var(--cwc-picker-input-icon-warning-color,var(--cwc-color-status-warning,#fbb03b))}.cwc-picker--warning .cwc-picker__status-message{color:var(--cwc-picker-status-message-warning-color,var(--cwc-color-status-warning,#fbb03b))}.cwc-picker--success .cwc-picker__input{border-color:var(--cwc-picker-input-success-border-color,var(--cwc-color-status-success,#7ac943));background-color:var(--cwc-picker-input-success-background-color,var(--cwc-color-status-success-alpha-five,rgba(122,201,67,.05)))}.cwc-picker--success .cwc-picker__input:after{color:var(--cwc-picker-input-icon-success-color,var(--cwc-color-status-success,#7ac943))}.cwc-picker--success .cwc-picker__status-message{color:var(--cwc-picker-status-message-success-color,var(--cwc-color-status-success,#7ac943))}.cwc-picker--header-noborder .cwc-picker__input{border:none;background:none;padding:0;height:auto;display:-ms-inline-flexbox;display:inline-flex;font-size:inherit}[dir=ltr] .cwc-picker--header-noborder .cwc-picker__input:after{right:auto}[dir=rtl] .cwc-picker--header-noborder .cwc-picker__input:after{left:auto}[dir=ltr] .cwc-picker--header-noborder .cwc-picker__input:after{margin-left:.25rem}[dir=rtl] .cwc-picker--header-noborder .cwc-picker__input:after{margin-right:.25rem}.cwc-picker--header-noborder .cwc-picker__input:after{inset-inline-end:auto;position:relative;-webkit-margin-start:.25rem;margin-inline-start:.25rem}.cwc-picker--header-noborder .cwc-picker__input-output{color:var(--cwc-picker-input-output-header-noborder-color,var(--cwc-color-ui-primary-darkest,#001b3a))}.cwc-picker--header-noborder .cwc-picker__input-output.placeholder{font-size:inherit}.cwc-picker--unwrap .cwc-picker__label{display:none}.cwc-picker--unwrap .cwc-picker__status-message{top:2.75rem;bottom:auto}[dir=ltr] .cwc-picker--mobile .cwc-picker__label{left:.75rem}[dir=rtl] .cwc-picker--mobile .cwc-picker__label{right:.75rem}.cwc-picker--mobile .cwc-picker__label{top:14px;z-index:1;inset-inline-start:.75rem;background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));padding:0 .25rem;-webkit-transition:all .15s ease;transition:all .15s ease}.cwc-picker--mobile .cwc-picker__label--placeholder{font-size:1rem;top:35px;z-index:1;color:var(--cwc-picker-label-placeholder-mobile-color,var(--cwc-color-grayscale-medium,#666))!important;-webkit-transition:all .15s ease;transition:all .15s ease;background-image:none}.cwc-picker--mobile .cwc-picker__label--active{color:var(--cwc-picker-label-active-mobile-color,var(--cwc-color-links,#3fa9f5))}.cwc-picker--mobile.cwc-picker--error .cwc-picker__label{color:var(--cwc-picker-label-error-mobile-color,var(--cwc-color-status-error,#ee3d42));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-error-washed-five,#f9f0f0) 0,var(--cwc-color-status-error-washed-five,#f9f0f0))}.cwc-picker--mobile.cwc-picker--warning .cwc-picker__label{color:var(--cwc-picker-label-warning-mobile-color,var(--cwc-color-status-warning,#fbb03b));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-warning-washed-five,#faf6f0) 0,var(--cwc-color-status-warning-washed-five,#faf6f0))}.cwc-picker--mobile.cwc-picker--success .cwc-picker__label{color:var(--cwc-picker-label-success-mobile-color,var(--cwc-color-status-success,#7ac943));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-success-washed-five,#f3f7f0) 0,var(--cwc-color-status-success-washed-five,#f3f7f0))}.cwc-picker__overlay{display:block;position:fixed;z-index:999;background-image:linear-gradient(180deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));border-radius:3px;-webkit-box-shadow:0 8px 13px rgba(0,0,0,.3);box-shadow:0 8px 13px rgba(0,0,0,.3);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:250px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;opacity:1;max-height:300px;max-width:80vw;padding-top:3px}.cwc-picker__overlay.cwc-picker--hidden{opacity:0;pointer-events:none}.cwc-picker__overlay.np,.cwc-picker__overlay.pp{-ms-flex-item-align:end;align-self:flex-end;-webkit-box-shadow:0 -8px 13px rgba(0,0,0,.3);box-shadow:0 -8px 13px rgba(0,0,0,.3);background-image:linear-gradient(0deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff))}[dir=ltr] .cwc-picker__overlay-header:before{margin-left:1.5em}[dir=rtl] .cwc-picker__overlay-header:before{margin-right:1.5em}.cwc-picker__overlay-header:before{content:\\\"\\\";font-family:dls-icons;position:absolute;line-height:1.5rem;font-size:1rem;top:.5rem;color:var(--cwc-picker-overlay-header-color,var(--cwc-color-links,#3fa9f5));pointer-events:none;-webkit-margin-start:1.5em;margin-inline-start:1.5em;margin-top:2px}.cwc-picker__overlay-footer{padding:.75rem 0;border-top:1px solid var(--cwc-picker-overlay-footer-border-color,var(--cwc-color-elements-input-border,#adaebb));margin:0 1rem;display:-ms-flexbox;display:flex}.cwc-picker__overlay-footer--justify-start{-ms-flex-pack:start;justify-content:flex-start}.cwc-picker__overlay-footer--justify-end{-ms-flex-pack:end;justify-content:flex-end}[dir=ltr] .cwc-picker__overlay-filter{padding-left:2rem}[dir=rtl] .cwc-picker__overlay-filter{padding-right:2rem}.cwc-picker__overlay-filter{margin:0 1rem;padding:0;-webkit-padding-start:2rem;padding-inline-start:2rem;font-family:inherit;border:none;background-color:var(--cwc-picker-overlay-filter-background-color,var(--cwc-color-grayscale-white,#fff));border-bottom:1px solid var(--cwc-picker-overlay-filter-border-color,var(--cwc-color-elements-input-border,#adaebb));border-radius:0;width:calc(100% - 2rem);-webkit-box-sizing:border-box;box-sizing:border-box;font-size:1rem;height:2.5rem;outline:none}.cwc-picker__options-scroller{-ms-flex:1 1 auto;flex:1 1 auto;overflow-y:auto}.cwc-picker__option{padding:.625rem 2rem;cursor:pointer;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.cwc-picker__option--highlighted{background-color:var(--cwc-picker-option-highlight-background-color,var(--cwc-color-elements-bg,#f4f6f9))}\\@media (max-width:767px){[dir=ltr] .cwc-picker__overlay{left:0!important}[dir=rtl] .cwc-picker__overlay{right:0!important}.cwc-picker__overlay{top:0!important;inset-inline-start:0!important;width:100%!important;height:100vh!important;max-height:100vh!important;max-width:100vw!important;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:var(--cwc-picker-overlay-backdrop-background-color,var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8)));pointer-events:none!important}.cwc-picker__overlay.nn,.cwc-picker__overlay.np,.cwc-picker__overlay.pn,.cwc-picker__overlay.pp{background-image:none}}\";\n  }\n\n};\nexport { PickerInput as cwc_picker };","map":null,"metadata":{},"sourceType":"module"}