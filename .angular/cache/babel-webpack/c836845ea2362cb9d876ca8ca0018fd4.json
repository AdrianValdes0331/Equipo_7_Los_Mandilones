{"ast":null,"code":"import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './core-85189c77.js';\nconst TableRowExpandable = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The design version of the framework\n     */\n\n    this.designVersion = null;\n    /**\n     * Specify if the detail is visible or not\n     */\n\n    this.expanded = false;\n    this.isExpanded = false;\n    this.expandEvent = createEvent(this, \"cwcExpand\", 7);\n  }\n\n  updateExpandedValue(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.isExpanded = newValue;\n      this.setExpandedToChildren(newValue);\n    }\n  }\n\n  setExpanded(event) {\n    event.stopPropagation();\n\n    if (this.isExpanded !== event.detail) {\n      this.isExpanded = event.detail;\n      this.expandEvent.emit(this.isExpanded);\n    }\n  }\n\n  componentWillLoad() {\n    this.isExpanded = this.expanded;\n    this.setExpandedToChildren(this.expanded);\n  }\n\n  setExpandedToChildren(expanded) {\n    this.host.querySelectorAll('cwc-tr').forEach(tr => {\n      tr['expanded'] = expanded;\n    });\n  }\n\n  render() {\n    return h(Host, {\n      class: this.designVersion,\n      role: \"row\",\n      \"aria-expanded\": this.isExpanded\n    }, h(\"slot\", {\n      name: \"content\"\n    }), this.isExpanded && h(\"slot\", {\n      name: \"detail\"\n    }));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"expanded\": [\"updateExpandedValue\"]\n    };\n  }\n\n  static get style() {\n    return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:table-row;vertical-align:inherit;border-color:inherit}\";\n  }\n\n};\nexport { TableRowExpandable as cwc_tr_expandable };","map":null,"metadata":{},"sourceType":"module"}